{"expireTime":9007200880603433000,"key":"transformer-remark-markdown-ast-4231bacd67635cf54918a69ccee8bde5-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"در این فصل قراره که یاد بگیریم چطور با استفاده از iterator ها و \nalgorithm(الگوریتم) های موجود در کتابخانه استاندارد سی++ یا همون STL \nکارهامون رو پیش ببریم. یاد میگیریم که توابع لاندا چی هستن و چطور ازشون \nاستفاده بکنیم، اشاره گر به تابع چیه و چطور میشه ازش استفاده کرد و چیز \nهای دیگه.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":6,"column":10,"offset":288},"indent":[1,1,1,1]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":6,"column":10,"offset":288},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"نکاتی درباره پیمایش‌گر ها (Iterators)","position":{"start":{"line":8,"column":4,"offset":293},"end":{"line":8,"column":41,"offset":330},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":290},"end":{"line":8,"column":41,"offset":330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"اینکه یه کانتینر از چه iterator هایی پشتیبانی میکنه مشخص کنندهٔ اینه \nکه از چه الگوریتم هایی میشه برای این کانتینر استفاده کرد. به عنوان مثال \nکانتینر های vector و array. این دو کانتینر از random-access iterator \nپشتیبانی میکنن(وقتی از این نوع پشتیبانی میکنن یعنی از بقیه انواع پیمایش \nکننده ها هم پشتیبانی میکنن) و این یعنی همهٔ الگوریتم های موجود رو میشه \nبراشون استفاده کرد. البته نکته اینجاست که الگوریتم هایی که سایز کانتینر \nرو تغییر میدن برای array قابل استفاده نیستن. بنابراین مهم نیست که \nکانتینر چیه، اگه اون کانتینر، حداقل نوع iterator مورد نیاز برای یه \nالگوریتم رو ساپورت بکنه، میشه از اون الگوریتم براش استفاده کرد.","position":{"start":{"line":10,"column":1,"offset":332},"end":{"line":18,"column":64,"offset":961},"indent":[1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":10,"column":1,"offset":332},"end":{"line":18,"column":64,"offset":961},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"باطل شدن پیمایش ها (iterator invalidation)","position":{"start":{"line":20,"column":5,"offset":967},"end":{"line":20,"column":47,"offset":1009},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":963},"end":{"line":20,"column":47,"offset":1009},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"ایتریتور ها درواقع یک اشاره گر کپسوله شدن هستند که به عناصر کانتینر \nاشاره میکنن بنابراین ممکنه در صورت بروز یک سری تغییرات در کانتینر (که به\nکانتینر بستگی داره)، این اشاره گر اعتبارشو از دست بده و باطل بشه. پروسه\ninvalidate شدن اشاره گر ها، رفرنس ها و ایتریتور ها در بخش 23 استاندارد \nسی++ موجوده و ما اینجا فقط خلاصه ای از اونها رو بررسی می‌کنیم.","position":{"start":{"line":22,"column":1,"offset":1011},"end":{"line":26,"column":63,"offset":1359},"indent":[1,1,1,1]}}],"position":{"start":{"line":22,"column":1,"offset":1011},"end":{"line":26,"column":63,"offset":1359},"indent":[1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"اضافه کردن یه عنصر به کانتینر:","position":{"start":{"line":28,"column":6,"offset":1366},"end":{"line":28,"column":36,"offset":1396},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1361},"end":{"line":28,"column":37,"offset":1397},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"در ","position":{"start":{"line":30,"column":3,"offset":1401},"end":{"line":30,"column":6,"offset":1404},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">vector</code>","position":{"start":{"line":30,"column":6,"offset":1404},"end":{"line":30,"column":14,"offset":1412},"indent":[]}},{"type":"text","value":" ها، اگر اضافه کردن عنصر ما باعث بشه که \nوکتور اقدام به درخواست فضای بیشتر و در نتیجه reallocate شدن بکنه، تمام \niterator هایی که مربوط به این وکتور بودن باطل میشن. در غیر این صورت، هر \niterator ای که به فضای بین مکان عنصری که تازه اضافه شده و مکان آخرین \nعنصر موجود اشاره میکنه باطل میشه.","position":{"start":{"line":30,"column":14,"offset":1412},"end":{"line":34,"column":35,"offset":1705},"indent":[2,2,2,2]}}],"position":{"start":{"line":30,"column":3,"offset":1401},"end":{"line":34,"column":35,"offset":1705},"indent":[2,2,2,2]}}],"position":{"start":{"line":30,"column":1,"offset":1399},"end":{"line":34,"column":35,"offset":1705},"indent":[1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"در ","position":{"start":{"line":35,"column":3,"offset":1708},"end":{"line":35,"column":6,"offset":1711},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deque</code>","position":{"start":{"line":35,"column":6,"offset":1711},"end":{"line":35,"column":13,"offset":1718},"indent":[]}},{"type":"text","value":" ها، همه iterator ها باطل میشن.","position":{"start":{"line":35,"column":13,"offset":1718},"end":{"line":35,"column":44,"offset":1749},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1708},"end":{"line":35,"column":44,"offset":1749},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1706},"end":{"line":35,"column":44,"offset":1749},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"در ","position":{"start":{"line":36,"column":3,"offset":1752},"end":{"line":36,"column":6,"offset":1755},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">list</code>","position":{"start":{"line":36,"column":6,"offset":1755},"end":{"line":36,"column":12,"offset":1761},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":36,"column":12,"offset":1761},"end":{"line":36,"column":14,"offset":1763},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">forward_list</code>","position":{"start":{"line":36,"column":14,"offset":1763},"end":{"line":36,"column":28,"offset":1777},"indent":[]}},{"type":"text","value":" و ordered associative container ها هیچ تغییری در iterator ها بوجود نمیاد","position":{"start":{"line":36,"column":28,"offset":1777},"end":{"line":36,"column":101,"offset":1850},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1752},"end":{"line":36,"column":101,"offset":1850},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1750},"end":{"line":36,"column":101,"offset":1850},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"در unordered associative container ها تنها اگر عمل reallocation انجام بگیره، همه iterator ها باطل میشن.","position":{"start":{"line":37,"column":3,"offset":1853},"end":{"line":37,"column":106,"offset":1956},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1853},"end":{"line":37,"column":106,"offset":1956},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1851},"end":{"line":37,"column":106,"offset":1956},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1399},"end":{"line":37,"column":106,"offset":1956},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"حذف کردن یک عنصر از کانتینر باعث میشه iterator ای که به اون عنصر اشاره می‌کنه باطل بشه. علاوه بر اون:","position":{"start":{"line":39,"column":6,"offset":1963},"end":{"line":39,"column":107,"offset":2064},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1958},"end":{"line":39,"column":107,"offset":2064},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"در وکتور ها از اونجایی که عنصر حذف شده تا آخرین عنصر هر پیمایش‌گری وجود داشته باشه غیر فعال میشه","position":{"start":{"line":41,"column":3,"offset":2068},"end":{"line":41,"column":99,"offset":2164},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":2068},"end":{"line":41,"column":99,"offset":2164},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2066},"end":{"line":41,"column":99,"offset":2164},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"در ","position":{"start":{"line":42,"column":3,"offset":2167},"end":{"line":42,"column":6,"offset":2170},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">deque</code>","position":{"start":{"line":42,"column":6,"offset":2170},"end":{"line":42,"column":13,"offset":2177},"indent":[]}},{"type":"text","value":" ها اگر حذفی که رخ داده در جایی غیر از ابتدا یا انتهای کانتینر باشه باعث میشه کل پیمایشگر ها باطل بشن.","position":{"start":{"line":42,"column":13,"offset":2177},"end":{"line":42,"column":115,"offset":2279},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":2167},"end":{"line":42,"column":115,"offset":2279},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2165},"end":{"line":42,"column":115,"offset":2279},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2066},"end":{"line":42,"column":115,"offset":2279},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"توابع لاندا","position":{"start":{"line":44,"column":4,"offset":2284},"end":{"line":44,"column":15,"offset":2295},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2281},"end":{"line":44,"column":15,"offset":2295},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"خیلی از الگوریتم های موجود در STL میتونن ","position":{"start":{"line":46,"column":1,"offset":2297},"end":{"line":46,"column":42,"offset":2338},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"یک تابع‌‌‌‌‌‌","position":{"start":{"line":46,"column":44,"offset":2340},"end":{"line":46,"column":57,"offset":2353},"indent":[]}}],"position":{"start":{"line":46,"column":42,"offset":2338},"end":{"line":46,"column":59,"offset":2355},"indent":[]}},{"type":"text","value":"\nرو به عنوان ورودی خودشون داشته باشن. همونطور که قبلا می‌دونیم، اسم یک \nتابع به صورت ضمنی یک اشاره گر به ابتدای کد اون تابع هست. اما یک راه هم \nوجود داره که تابع خودمون رو منحصرا برای اون الگوریتمی که داریم ازش \nاستفاده میکنیم بنویسیم و اون رو دقیقا کنار بقیه آرگومان ها بنویسیم! برای\nاینکار یک مفهوم به اسم ","position":{"start":{"line":46,"column":59,"offset":2355},"end":{"line":51,"column":24,"offset":2663},"indent":[1,1,1,1,1]}},{"type":"strong","children":[{"type":"text","value":"توابع لاندا","position":{"start":{"line":51,"column":26,"offset":2665},"end":{"line":51,"column":37,"offset":2676},"indent":[]}}],"position":{"start":{"line":51,"column":24,"offset":2663},"end":{"line":51,"column":39,"offset":2678},"indent":[]}},{"type":"text","value":" به کارمون میاد که در واقع توابعی هستند که اسم ندارند و اصطلاحا بهشون میگن anonymous function.","position":{"start":{"line":51,"column":39,"offset":2678},"end":{"line":51,"column":133,"offset":2772},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2297},"end":{"line":51,"column":133,"offset":2772},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"برای اینکه دقیق تر متوجه بشیم، یه مثال رو بررسی می‌کنیم:","position":{"start":{"line":53,"column":1,"offset":2774},"end":{"line":53,"column":57,"offset":2830},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2774},"end":{"line":53,"column":57,"offset":2830},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"یکی از الگوریتم های جالبی که در STL وجود داره، اسمش ","position":{"start":{"line":55,"column":1,"offset":2832},"end":{"line":55,"column":53,"offset":2884},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">for_each</code>","position":{"start":{"line":55,"column":53,"offset":2884},"end":{"line":55,"column":63,"offset":2894},"indent":[]}},{"type":"text","value":"\nهست. این تابع میاد بازه ای از یک کانتینر رو میگیره و تابعی که ما بهش \nمیدیم رو برای تمام عناصر موجود در اون بازه اجرا میکنه. بهتره که کد رو \nببینیم:","position":{"start":{"line":55,"column":63,"offset":2894},"end":{"line":58,"column":8,"offset":3043},"indent":[1,1,1]}},{"type":"image","title":null,"url":"https://seedpuller.space/wp-content/uploads/2020/07/image-3.png","alt":null,"position":{"start":{"line":58,"column":8,"offset":3043},"end":{"line":58,"column":76,"offset":3111},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2832},"end":{"line":58,"column":76,"offset":3111},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"خب همونطور که می‌بینیم، تابع ","position":{"start":{"line":60,"column":1,"offset":3113},"end":{"line":60,"column":30,"offset":3142},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">for_each</code>","position":{"start":{"line":60,"column":30,"offset":3142},"end":{"line":60,"column":40,"offset":3152},"indent":[]}},{"type":"text","value":" برای دوتا آرگومان \nاولش دوتا iterator میگیره و آرگومان سومش یه تابع رو به عنوان ورودی \nدریافت می‌کنه. توی این مثال ما دوتا for_each زدیم که اولی میاد و صرفا \nعناصر رو ضربدر ۲ میکنه و چاپ می‌کنه و دومی میاد جمع همهٔ عنصر هارو \nمحاسبه می‌کنه. چجوریش رو میگم حالا.","position":{"start":{"line":60,"column":40,"offset":3152},"end":{"line":64,"column":36,"offset":3414},"indent":[1,1,1,1]}}],"position":{"start":{"line":60,"column":1,"offset":3113},"end":{"line":64,"column":36,"offset":3414},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"سینتکس توابع لاندا","position":{"start":{"line":66,"column":5,"offset":3420},"end":{"line":66,"column":23,"offset":3438},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":3416},"end":{"line":66,"column":23,"offset":3438},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"خب آرگومان اول و دوم که واضحن. میمونه آرگومان سوم که یه تابع لانداست. سینتکس توابع لاندا این شکلی ان:","position":{"start":{"line":68,"column":1,"offset":3440},"end":{"line":68,"column":102,"offset":3541},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3440},"end":{"line":68,"column":102,"offset":3541},"indent":[]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">[</span>introducer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>input arguments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>function  body<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":70,"column":1,"offset":3543},"end":{"line":72,"column":4,"offset":3600},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"خب همونطور که می‌بینید توابع لاندا با یک [] شروع میشن که اصطلاحا بهشون میگن ","position":{"start":{"line":74,"column":1,"offset":3602},"end":{"line":74,"column":77,"offset":3678},"indent":[]}},{"type":"strong","children":[{"type":"emphasis","children":[{"type":"text","value":"lambda introducer","position":{"start":{"line":74,"column":80,"offset":3681},"end":{"line":74,"column":97,"offset":3698},"indent":[]}}],"position":{"start":{"line":74,"column":79,"offset":3680},"end":{"line":74,"column":98,"offset":3699},"indent":[]}}],"position":{"start":{"line":74,"column":77,"offset":3678},"end":{"line":74,"column":100,"offset":3701},"indent":[]}},{"type":"text","value":". بقیه‌ش تقریبا مثل تابع معمولیه و  لیست پارامتر های ورودی میاد و در ادامه بدنه تابع قرار داره.","position":{"start":{"line":74,"column":100,"offset":3701},"end":{"line":74,"column":195,"offset":3796},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":3602},"end":{"line":74,"column":195,"offset":3796},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"توابع لاندا میتونن به متغییر های محلی(local) جایی که دارن داخلش تعریف\nمیشن دسترسی داشته باشن. مثلا توی مثال بالا تابع های لاندای ما میتونن به\nمتغییر هایی که داخل main تعریف شده دسترسی داشته باشن. اینجاست که lambda\nintroducer به کار میاد. درواقع lambda introducer به ما اجازه میده که \nمشخص کنیم از کدوم متغییر های موجود میخوایم استفاده کنیم. به اینکار \nاصطلاحا میگن ","position":{"start":{"line":76,"column":1,"offset":3798},"end":{"line":81,"column":14,"offset":4163},"indent":[1,1,1,1,1]}},{"type":"strong","children":[{"type":"emphasis","children":[{"type":"text","value":"capture","position":{"start":{"line":81,"column":17,"offset":4166},"end":{"line":81,"column":24,"offset":4173},"indent":[]}}],"position":{"start":{"line":81,"column":16,"offset":4165},"end":{"line":81,"column":25,"offset":4174},"indent":[]}}],"position":{"start":{"line":81,"column":14,"offset":4163},"end":{"line":81,"column":27,"offset":4176},"indent":[]}},{"type":"text","value":" کردن متغییر ها. ","position":{"start":{"line":81,"column":27,"offset":4176},"end":{"line":81,"column":44,"offset":4193},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":3798},"end":{"line":81,"column":44,"offset":4193},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"توی اولین ","position":{"start":{"line":84,"column":1,"offset":4196},"end":{"line":84,"column":11,"offset":4206},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">for_each</code>","position":{"start":{"line":84,"column":11,"offset":4206},"end":{"line":84,"column":21,"offset":4216},"indent":[]}},{"type":"text","value":" می‌بینیم که lambda introducer خالیه و\nاین یعنی تابع لاندای ما نمیخواد از هیچ متغییری استفاده کنه. و توی دومی \nما این رو می‌بینیم: ","position":{"start":{"line":84,"column":21,"offset":4216},"end":{"line":86,"column":21,"offset":4347},"indent":[1,1]}},{"type":"html","value":"<code class=\"language-text\">[&amp;sum]</code>","position":{"start":{"line":86,"column":21,"offset":4347},"end":{"line":86,"column":29,"offset":4355},"indent":[]}},{"type":"text","value":" و این یعنی رفرنسی از متغییر ","position":{"start":{"line":86,"column":29,"offset":4355},"end":{"line":86,"column":58,"offset":4384},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sum</code>","position":{"start":{"line":86,"column":58,"offset":4384},"end":{"line":86,"column":63,"offset":4389},"indent":[]}},{"type":"text","value":" رو در دسترس تابع قرار میده که ازش استفاده بکنه. دلیل اینکه از رفرنس استفاده شده هم اینه که بتونیم متغییر اصلی که داخل ","position":{"start":{"line":86,"column":63,"offset":4389},"end":{"line":86,"column":182,"offset":4508},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">main</code>","position":{"start":{"line":86,"column":182,"offset":4508},"end":{"line":86,"column":188,"offset":4514},"indent":[]}},{"type":"text","value":" قرار داره رو modify کنیم.","position":{"start":{"line":86,"column":188,"offset":4514},"end":{"line":86,"column":214,"offset":4540},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":4196},"end":{"line":86,"column":214,"offset":4540},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"برگردوندن مقدار در توابع لاندا","position":{"start":{"line":89,"column":5,"offset":4547},"end":{"line":89,"column":35,"offset":4577},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":4543},"end":{"line":89,"column":35,"offset":4577},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"تا الآن تابع های لاندای ما هیچ مقدار بازگشتی ای نداشتن و بنابراین به \nصورت پیشفرض مقدار بازگشتیشون به عنوان void مشخص میشد. اما اگر داخل تابع \nلاندامون یه return داشته باشیم نیاز داریم که نوع مقدار بازگشتی رو از \nطریق سینتکس trailing return type مشخص کنیم.","position":{"start":{"line":91,"column":1,"offset":4579},"end":{"line":94,"column":44,"offset":4835},"indent":[1,1,1]}}],"position":{"start":{"line":91,"column":1,"offset":4579},"end":{"line":94,"column":44,"offset":4835},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"اینطوریه : ","position":{"start":{"line":96,"column":1,"offset":4837},"end":{"line":96,"column":12,"offset":4848},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":4837},"end":{"line":96,"column":12,"offset":4848},"indent":[]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token operator\">-></span> type</code></pre></div>","position":{"start":{"line":98,"column":1,"offset":4850},"end":{"line":100,"column":4,"offset":4868},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"که اگر بخوام توی کد نشون بدم اینطوری میشه:","position":{"start":{"line":102,"column":1,"offset":4870},"end":{"line":102,"column":43,"offset":4912},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":4870},"end":{"line":102,"column":43,"offset":4912},"indent":[]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":104,"column":1,"offset":4914},"end":{"line":106,"column":4,"offset":4948},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"همونطور که می‌بینیم، جاش بین لیست پارامتر ها و بدنه تابع‌ست.","position":{"start":{"line":108,"column":1,"offset":4950},"end":{"line":108,"column":61,"offset":5010},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":4950},"end":{"line":108,"column":61,"offset":5010},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"الگوریتم ها","position":{"start":{"line":110,"column":4,"offset":5015},"end":{"line":110,"column":15,"offset":5026},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":5012},"end":{"line":110,"column":16,"offset":5027},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"این بخش از فصل تعداد زیادی الگوریتم رو توضیح داده ولی من فقط اونایی که به نظرم بدرد بخور تر یا جالب تر میان رو اینجا می‌نویسم.","position":{"start":{"line":112,"column":1,"offset":5029},"end":{"line":112,"column":127,"offset":5155},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5029},"end":{"line":112,"column":127,"offset":5155},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"html","value":"<code class=\"language-text\">mismatch</code>","position":{"start":{"line":114,"column":5,"offset":5161},"end":{"line":114,"column":15,"offset":5171},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":5157},"end":{"line":114,"column":15,"offset":5171},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"وظیفهٔ این تابع اینه که بین دوتا کانتینر بگرده و اونجایی که دوتا خونه\nمتناظر باهم یک مقدار مساوی نداشته باشن، می‌ایسته و اطلاعات اون مکان رو \n(به شکل یک ","position":{"start":{"line":116,"column":1,"offset":5173},"end":{"line":118,"column":12,"offset":5326},"indent":[1,1]}},{"type":"html","value":"<code class=\"language-text\">pair</code>","position":{"start":{"line":118,"column":12,"offset":5326},"end":{"line":118,"column":18,"offset":5332},"indent":[]}},{"type":"text","value":" از iterator های هردو کانتینر) بهمون \nبرمیگردونه. این تابع ۴ تا ورودی داره(اونی که توی کتاب نشون داده \nاینطوریه) که دوتای اول بازه رو برای کانتینر اول مشخص میکنن و دوتای دوم \nبازه رو برای کانتینر دوم مشخص میکنن. ","position":{"start":{"line":118,"column":18,"offset":5332},"end":{"line":121,"column":38,"offset":5544},"indent":[1,1,1]}}],"position":{"start":{"line":116,"column":1,"offset":5173},"end":{"line":121,"column":38,"offset":5544},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"inserter ها","position":{"start":{"line":123,"column":5,"offset":5550},"end":{"line":123,"column":16,"offset":5561},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":5546},"end":{"line":123,"column":16,"offset":5561},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"بیاین تابع merge رو باهم ببینیم:","position":{"start":{"line":125,"column":1,"offset":5563},"end":{"line":125,"column":33,"offset":5595},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":5563},"end":{"line":125,"column":33,"offset":5595},"indent":[]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a1<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a2<span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":127,"column":1,"offset":5597},"end":{"line":132,"column":4,"offset":5749},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"توی مثال بالا، وکتور result باید حتما به اندازه ۶ تا خونه جا داشته \nباشه تا a1 و a2 داخلش ذخیره بشن. بنابراین باید قبل از اجرای تابع ","position":{"start":{"line":134,"column":1,"offset":5751},"end":{"line":135,"column":66,"offset":5884},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">merge</code>","position":{"start":{"line":135,"column":66,"offset":5884},"end":{"line":135,"column":73,"offset":5891},"indent":[]}},{"type":"text","value":"، باید تخصیص حافظه صورت بگیره.","position":{"start":{"line":135,"column":73,"offset":5891},"end":{"line":135,"column":103,"offset":5921},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":5751},"end":{"line":135,"column":103,"offset":5921},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"اما زمانی هست که ما نمی‌خوایم از قبل حافظه ای تخصیص بدیم و میخوایم یک\nکلاسی مثل وکتور، خودش اینکار رو به ازای اضافه شدن عناصر جدید انجام بده.\nاینجاست که inserter ها (از هدر iterator) به کمک ما میان. مثال بالا اگر \nاجرا بشه به مشکل میخوره چراکه result به اندازه کافی جا نداره. حالا با \nاستفاده از inserter این مشکل رو برطرف می‌کنیم:","position":{"start":{"line":137,"column":1,"offset":5923},"end":{"line":141,"column":47,"offset":6254},"indent":[1,1,1,1]}}],"position":{"start":{"line":137,"column":1,"offset":5923},"end":{"line":141,"column":47,"offset":6254},"indent":[1,1,1,1]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a1<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a2<span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":143,"column":1,"offset":6256},"end":{"line":148,"column":4,"offset":6415},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"تابع back","position":{"start":{"line":150,"column":1,"offset":6417},"end":{"line":150,"column":10,"offset":6426},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"inserter درواقع میاد و به ازای هر عنصری که میخواد به result اضافه بشه، تابع `push","position":{"start":{"line":150,"column":11,"offset":6427},"end":{"line":150,"column":92,"offset":6508},"indent":[]}}],"position":{"start":{"line":150,"column":10,"offset":6426},"end":{"line":150,"column":93,"offset":6509},"indent":[]}},{"type":"text","value":"back` مربوط به کانتینر result رو صدا می‌زنه. به همین راحتی (:","position":{"start":{"line":150,"column":93,"offset":6509},"end":{"line":150,"column":154,"offset":6570},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":6417},"end":{"line":150,"column":154,"offset":6570},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Function Object ها","position":{"start":{"line":152,"column":4,"offset":6575},"end":{"line":152,"column":22,"offset":6593},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":6572},"end":{"line":152,"column":22,"offset":6593},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"همونطور که می‌دونیم، بسیاری از الگوریتم های موجود در کتابخونه \nاستاندارد میتونن یک تابع رو به عنوان آرگومان آخرشون بگیرن. تا اینجا \nدیدیم که این تابع میتونه یک function pointer یا یک تابع لاندا (lambda \nfunction) باشه. کلاس هایی که میتونن توابع لاندا یا اشاره گر به توابع رو \nبه عنوان ورودی بگیرن، میتونن یک نوع دیگه از تابع رو هم دریافت کنن که \nاسمش function object هست. function object درواقع یک شئ از کلاسی هست که \nاوپراتور پرانتزش overload شده. یعنی ما در member function های کلاس، یک \nتابع به اسم ","position":{"start":{"line":154,"column":1,"offset":6595},"end":{"line":161,"column":13,"offset":7097},"indent":[1,1,1,1,1,1,1]}},{"type":"html","value":"<code class=\"language-text\">operator()</code>","position":{"start":{"line":161,"column":13,"offset":7097},"end":{"line":161,"column":25,"offset":7109},"indent":[]}},{"type":"text","value":" تعریف کردیم.","position":{"start":{"line":161,"column":25,"offset":7109},"end":{"line":161,"column":38,"offset":7122},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":6595},"end":{"line":161,"column":38,"offset":7122},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"اشیاء ای که از این کلاس ما ساخته میشن میتونن بجای تابع لاندا یا اشاره\nگر به تابع استفاده بشن.(درواقع خود توابع لاندا توسط کامپایلر به یک \nاشاره گر به تابع یا function object تبدیل میشن تا بشه روشون بهینه سازی \nانجام داد).","position":{"start":{"line":163,"column":1,"offset":7124},"end":{"line":166,"column":12,"offset":7345},"indent":[1,1,1]}}],"position":{"start":{"line":163,"column":1,"offset":7124},"end":{"line":166,"column":12,"offset":7345},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"در بیشتر جاها(و نه همه جا) میشه بجای function object از تابع لاندا یا اشاره گر به تابع استفاده کرد.","position":{"start":{"line":168,"column":1,"offset":7347},"end":{"line":168,"column":100,"offset":7446},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":7347},"end":{"line":168,"column":100,"offset":7446},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"از طریق هدر ","position":{"start":{"line":170,"column":1,"offset":7448},"end":{"line":170,"column":13,"offset":7460},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;functional></code>","position":{"start":{"line":170,"column":13,"offset":7460},"end":{"line":170,"column":27,"offset":7474},"indent":[]}},{"type":"text","value":" میتونیم به function object های از پیش تعریف شده ","position":{"start":{"line":170,"column":27,"offset":7474},"end":{"line":170,"column":76,"offset":7523},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"STL","position":{"start":{"line":170,"column":77,"offset":7524},"end":{"line":170,"column":80,"offset":7527},"indent":[]}}],"position":{"start":{"line":170,"column":76,"offset":7523},"end":{"line":170,"column":81,"offset":7528},"indent":[]}},{"type":"text","value":"\nدسترسی داشته باشیم که خیلی هم کاربردی و خفنن. تابع less","position":{"start":{"line":170,"column":81,"offset":7528},"end":{"line":171,"column":56,"offset":7584},"indent":[1]}},{"type":"html","value":"<T>","position":{"start":{"line":171,"column":56,"offset":7584},"end":{"line":171,"column":59,"offset":7587},"indent":[]}},{"type":"text","value":" که توی\nمثال های بالا(بخش set و …) دیدیم جزئی از function object های موجود در ","position":{"start":{"line":171,"column":59,"offset":7587},"end":{"line":172,"column":71,"offset":7665},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"STL","position":{"start":{"line":172,"column":72,"offset":7666},"end":{"line":172,"column":75,"offset":7669},"indent":[]}}],"position":{"start":{"line":172,"column":71,"offset":7665},"end":{"line":172,"column":76,"offset":7670},"indent":[]}},{"type":"text","value":" عه.","position":{"start":{"line":172,"column":76,"offset":7670},"end":{"line":172,"column":80,"offset":7674},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":7448},"end":{"line":172,"column":80,"offset":7674},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"مزایای function object ها","position":{"start":{"line":174,"column":5,"offset":7680},"end":{"line":174,"column":30,"offset":7705},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":7676},"end":{"line":174,"column":30,"offset":7705},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"اولین تفاوتش با لاندا و امثالهم اینه که از اونجایی که عضوی از یک \nکلاسه، کامپایلر راحت تر میتونه بهینه سازی هایی مثل inline کردن رو انجام \nبده.","position":{"start":{"line":176,"column":1,"offset":7707},"end":{"line":178,"column":5,"offset":7850},"indent":[1,1]}}],"position":{"start":{"line":176,"column":1,"offset":7707},"end":{"line":178,"column":5,"offset":7850},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"دومین تفاوت که یک نقطه قوت محسوب میشه، قابلیت استفاده از data member های کلاس هست.","position":{"start":{"line":180,"column":1,"offset":7852},"end":{"line":180,"column":83,"offset":7934},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":7852},"end":{"line":180,"column":83,"offset":7934},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"پایان","position":{"start":{"line":182,"column":4,"offset":7939},"end":{"line":182,"column":9,"offset":7944},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":7936},"end":{"line":182,"column":9,"offset":7944},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"این فصل هم تموم شد. مثل فصل های قبلی با تاخیر اما برخلاف فصل های \nقبلی، تاخیرش زیاد نبود! فصل بعدی توی مدیریت استثنا ها و خطا ها عمیق \nمیشیم.","position":{"start":{"line":184,"column":1,"offset":7946},"end":{"line":186,"column":7,"offset":8087},"indent":[1,1]}}],"position":{"start":{"line":184,"column":1,"offset":7946},"end":{"line":186,"column":7,"offset":8087},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":187,"column":1,"offset":8088}}}}