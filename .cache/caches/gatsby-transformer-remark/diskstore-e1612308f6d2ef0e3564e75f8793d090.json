{"expireTime":9007200880603432000,"key":"transformer-remark-markdown-html-ast-ff09173ed7a5110c05a3645f7a4740ec-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"سی++ یکی از زبان هاییه که این اجازه رو به ما میده تا کلاسی که نوشتیم\nچندین کلاس والد داشته باشه یا به عبارت دیگه، قابلیت ارث بری چندگانه یا\nmultiple inheritance رو داره.","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":5,"column":30,"offset":173}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":5,"column":30,"offset":173}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"چطور استفاده می‌شه","position":{"start":{"line":7,"column":4,"offset":178},"end":{"line":7,"column":22,"offset":196}}}],"position":{"start":{"line":7,"column":1,"offset":175},"end":{"line":7,"column":22,"offset":196}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"خودِ ارث بری چندتایی خیلی عجیب غریب نیست و تنها فرقش اینه که موقع\nنوشتن کلاس، با استفاده از «کاما» میایم و Base Class هارو جدا می‌کنیم.\nمثال:","position":{"start":{"line":9,"column":1,"offset":198},"end":{"line":11,"column":6,"offset":341}}}],"position":{"start":{"line":9,"column":1,"offset":198},"end":{"line":11,"column":6,"offset":341}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token double-colon punctuation\">::</span>string m_name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> m_age<span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token function\">m_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_age</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n  \n    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_age<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token double-colon punctuation\">::</span>string m_employer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> m_wage<span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string employer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> wage<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token function\">m_employer</span><span class=\"token punctuation\">(</span>employer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_wage</span><span class=\"token punctuation\">(</span>wage<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n  \n    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">getEmployer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_employer<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getWage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_wage<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token comment\">// Teacher publicly inherits Person and Employee</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n     <span class=\"token keyword\">int</span> m_teachesGrade<span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Teacher</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string employer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> wage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> teachesGrade<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span>employer<span class=\"token punctuation\">,</span> wage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_teachesGrade</span><span class=\"token punctuation\">(</span>teachesGrade<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":13,"column":1,"offset":343},"end":{"line":60,"column":4,"offset":1246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"اما بیشتر از مزایاش، چالش ها و مشکلاتش قابل بحثه!","position":{"start":{"line":62,"column":1,"offset":1248},"end":{"line":62,"column":50,"offset":1297}}}],"position":{"start":{"line":62,"column":1,"offset":1248},"end":{"line":62,"column":50,"offset":1297}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"مشکل Diamond Problem","position":{"start":{"line":64,"column":4,"offset":1302},"end":{"line":64,"column":24,"offset":1322}}}],"position":{"start":{"line":64,"column":1,"offset":1299},"end":{"line":64,"column":24,"offset":1322}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"این مشکل که به Deadly Diamond of Death هم معروفه، از این قراره که فرض\nکنید کلاس های B و C دو کلاس مجزا باشند و هر دوتاشون از کلاس A ارث بری\nکرده باشند. حالا اگر ما کلاسی مثل D داشته باشیم که به شکل همزمان از B و C\nارث بری کرده، دوبار کلاس A رو در کلاس D خواهیم داشت که این باعث مشکل\nمی‌شه.","position":{"start":{"line":66,"column":1,"offset":1324},"end":{"line":70,"column":7,"offset":1615}}}],"position":{"start":{"line":66,"column":1,"offset":1324},"end":{"line":70,"column":7,"offset":1615}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Diamond_inheritance.svg/220px-Diamond_inheritance.svg.png","alt":null},"children":[],"position":{"start":{"line":72,"column":1,"offset":1617},"end":{"line":72,"column":121,"offset":1737}}},{"type":"text","value":"{: .normal}\n","position":{"start":{"line":72,"column":121,"offset":1737},"end":{"line":73,"column":1,"offset":1749}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"نمایش تصویری Diamond problem. حالا دلیل اسمش معلوم شد؟ (:","position":{"start":{"line":73,"column":2,"offset":1750},"end":{"line":73,"column":59,"offset":1807}}}],"position":{"start":{"line":73,"column":1,"offset":1749},"end":{"line":73,"column":60,"offset":1808}}}],"position":{"start":{"line":72,"column":1,"offset":1617},"end":{"line":73,"column":60,"offset":1808}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"اگر تابعی مثل print در کلاس A داشته باشیم که در هیچکدوم از ارث بری ها\nبازنویسی نشده باشه و حالا از طریق کلاس D بخواد فراخوانی بشه چه اتفاقی\nمیوفته؟","position":{"start":{"line":75,"column":1,"offset":1810},"end":{"line":77,"column":8,"offset":1958}}}],"position":{"start":{"line":75,"column":1,"offset":1810},"end":{"line":77,"column":8,"offset":1958}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"به ارور برمیخوریم! چون کامپایلر نمیدونه از کدوم یکی از نسخه های A که\nالآن در اختیار داره باید استفاده کنه و از کدوم مسیر باید بره. ","position":{"start":{"line":79,"column":1,"offset":1960},"end":{"line":80,"column":63,"offset":2092}}}],"position":{"start":{"line":79,"column":1,"offset":1960},"end":{"line":80,"column":63,"offset":2092}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"از طریق کلاس C بره و به A برسه یا از طریق کلاس B ؟","position":{"start":{"line":82,"column":1,"offset":2094},"end":{"line":82,"column":51,"offset":2144}}}],"position":{"start":{"line":82,"column":1,"offset":2094},"end":{"line":82,"column":51,"offset":2144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"حل مسئه Diamond problem","position":{"start":{"line":84,"column":4,"offset":2149},"end":{"line":84,"column":27,"offset":2172}}}],"position":{"start":{"line":84,"column":1,"offset":2146},"end":{"line":84,"column":27,"offset":2172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"راه حل اول اینه که دقیقا برای کامپایلر مشخص کنیم از چه مسیری باید به کلاس A برسه. مثال:","position":{"start":{"line":86,"column":1,"offset":2174},"end":{"line":86,"column":88,"offset":2261}}}],"position":{"start":{"line":86,"column":1,"offset":2174},"end":{"line":86,"column":88,"offset":2261}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// multiple inheritance </span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \nD object<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// explicitly determine a way to \"A\"</span>\nD<span class=\"token punctuation\">.</span><span class=\"token class-name\">B</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":88,"column":1,"offset":2263},"end":{"line":104,"column":4,"offset":2490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"یک راه دیگه هم وجود داره.","position":{"start":{"line":106,"column":1,"offset":2492},"end":{"line":106,"column":26,"offset":2517}}}],"position":{"start":{"line":106,"column":1,"offset":2492},"end":{"line":106,"column":26,"offset":2517}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Virtual Inheritance","position":{"start":{"line":108,"column":4,"offset":2522},"end":{"line":108,"column":23,"offset":2541}}}],"position":{"start":{"line":108,"column":1,"offset":2519},"end":{"line":108,"column":23,"offset":2541}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"با استفاده از ارث بری مجازی، سی++ فقط یک نسخه از A رو به عنوان والد در نظر میگیره و نمیذاره چند نسخه از A بوجود بیاد. ","position":{"start":{"line":110,"column":1,"offset":2543},"end":{"line":110,"column":119,"offset":2661}}}],"position":{"start":{"line":110,"column":1,"offset":2543},"end":{"line":110,"column":119,"offset":2661}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"فقط کافیه که ارث بری‌مون رو به شکل virtual انجام بدیم:","position":{"start":{"line":112,"column":1,"offset":2663},"end":{"line":112,"column":55,"offset":2717}}}],"position":{"start":{"line":112,"column":1,"offset":2663},"end":{"line":112,"column":55,"offset":2717}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">virtual</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// multiple inheritance </span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">C</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \nD object<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// no need to explicit qualification</span>\nD<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":114,"column":1,"offset":2719},"end":{"line":130,"column":4,"offset":2967}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"نحوه عمل کردن virtual inheritance بسیار شبیه به Virtual function ها هست که ","position":{"start":{"line":132,"column":1,"offset":2969},"end":{"line":132,"column":76,"offset":3044}}},{"type":"element","tagName":"a","properties":{"href":"https://seedpuller.space/2020/05/04/what-ive-learned-from-deitel-chapter12-polymorphism/","target":"_blank","rel":"nofollow"},"children":[{"type":"text","value":"توی این پست","position":{"start":{"line":132,"column":77,"offset":3045},"end":{"line":132,"column":88,"offset":3056}}}],"position":{"start":{"line":132,"column":76,"offset":3044},"end":{"line":132,"column":179,"offset":3147}}},{"type":"text","value":"{align: center} درباره‌ش توضیح دادم.","position":{"start":{"line":132,"column":179,"offset":3147},"end":{"line":132,"column":215,"offset":3183}}}],"position":{"start":{"line":132,"column":1,"offset":2969},"end":{"line":132,"column":215,"offset":3183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"در آخر","position":{"start":{"line":134,"column":4,"offset":3188},"end":{"line":134,"column":10,"offset":3194}}}],"position":{"start":{"line":134,"column":1,"offset":3185},"end":{"line":134,"column":10,"offset":3194}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"همونطور که دیدیم، ظاهرا چالش ها و مشکلات این روش بیشتر از فایده‌ش هست\nاما جاهایی هم هست که بهترین راهیه که میتونیم ازش استفاده کنیم.","position":{"start":{"line":136,"column":1,"offset":3196},"end":{"line":137,"column":63,"offset":3328}}}],"position":{"start":{"line":136,"column":1,"offset":3196},"end":{"line":137,"column":63,"offset":3328}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"بهتره که تا جای ممکن سعی کنیم راه الگوریتم‌مون رو بدون استفاده از ارث\nبری چندگانه پیاده سازی بکنیم مگر اینکه پیاده سازی به این روش باعث بشه\nکه پیچیدگی کار کمتر بشه.","position":{"start":{"line":139,"column":1,"offset":3330},"end":{"line":141,"column":25,"offset":3495}}}],"position":{"start":{"line":139,"column":1,"offset":3330},"end":{"line":141,"column":25,"offset":3495}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":142,"column":1,"offset":3496}}}}