{"expireTime":9007200880603433000,"key":"transformer-remark-markdown-html-7a9c6bda84461be46f774103b5fe45e1-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":"<p>امروز درباره‌ی اینتراپت(وقفه) ها در معماری کامپیوتر خوندم. امیدوارم مطالبی که فهمیدم درست باشن ! :)</p>\n<p>متاسفانه توی مطالعه معماری خیلی کًند پیش میرم ! :((</p>\n<p>اینتراپت با ساب‌روتین ها سه تا تفاوت مهم داره:</p>\n<ul>\n<li>اینتراپت معمولا بجای اینکه از طریق اجرای یک instruction اجرا بشه، با انتشار یک سیگنال درونی/بیرونی اجرا میشه </li>\n<li>آدرس سرویسِ اینتراپت برخلاف instruction ها معمولا توسط سخت افزار مشخص میشه نه توسط address field</li>\n<li>در\nفرآیند اینتراپت برای مشخص کردن CPU state مقدار بیشتری اطلاعات(مثل\nرجیستر ها، شمارنده‌ی برنامه، و یه سری status condition ها) ذخیره میشه\nدرحالی که در ساب‌روتین ها شمارنده‌ی برنامه ذخیره میشه.</li>\n</ul>\n<h2>کِی اینتراپت اتفاق میوفته؟</h2>\n<p>اینتراپت فقط اتفاق میوفته که دستور قبلی به صورت کامل انجام شده باشه و\nاگر CPU در حین انجام یک دستور باشه، به اینتراپت جواب نمیده. وقتی یک\nدستور تموم میشه، سی پی یو چک میکنه که آیا اینتراپتی در حالت pending هست\nیا نه. اگر بود، CPU وارد hardware interrupt cycle میشه. توی این سیکل\nمحتویات PC و PSW(Program Status Word) توی استک قرار میگیره و آدرس برنچ\nسرویسی که قراره اجرا بشه بجای PC قرار میگیره. همچنین PSW جدید هم توی جای\nخودش قرار میگیره و اجرای دستورات آغاز میشه.</p>\n<p>آخرین دستور اینتراپت، interrupt return cycle هست که طی اون سی پی یو\nبه حالت قبل از وقوع وقفه برمیگرده و روتین خودش رو ادامه میده.</p>\n<h2>چند نوع اینتراپت داریم؟</h2>\n<p>سه نوع وقفه داریم که به صورت زیر هستن:</p>\n<ul>\n<li>External Interrupt</li>\n<li>Internal Interrupt</li>\n<li>Software Interrupt</li>\n</ul>\n<p>اینتراپت های اکسترنال و اینترنال تحت تاثیر انتشار سیگنال های سخت\nافزاری اتفاق میوفتن اما اینتراپت های نرم افزاری از طریق اجرای دستورات در\nبرنامه اتفاق می‌افتن. </p>\n<p>اینتراپت های نرم افزاری یک سری فراخوانی دستورات هستند که بیشتر بجای\nاینکه شبیه ساب‌روتین باشن، شبیه اینتراپت هستن. درواقع برنامه نویس با این\nوقفه ها میتونه CPU رو به حالت supervisor ببره و از دستورات اون بخش\nاستفاده کنه. به عنوان مثال، استفاده از دستورات I/O نیازمند مد supervisor\nهست. برنامه در حالت یوزر مود هست و هنگامی که بخواد از انتقال I/O\nاستفاده کنه از طریق supervisor call instruction موجب میشه که سی پی یو به\nحالت سوپروایزر بره.</p>\n<h2>بخش بعدی</h2>\n<p>بخش بعدی ای که قراره بخونم(فردا) درباره‌ی معماری RISC هست.</p>"}