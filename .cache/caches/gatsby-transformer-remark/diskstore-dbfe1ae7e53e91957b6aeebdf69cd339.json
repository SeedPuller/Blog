{"expireTime":9007200880603433000,"key":"transformer-remark-markdown-html-ast-f1a9212c74be426008ddb382130932ca-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"تقریبا یه هفته طول کشید تا پاراگراف آخر این پست رو بنویسم که درباره‌ی\nچند ریختی یا polymorphism توی سی++ عه. دلیلش هم همون بهونه‌ی قدیمیم،\nحال نداشتن، بود. احتمالا وقتی این متن رو میخونید متوجه میشید که به شدت\nبا بی‌حوصلگی نوشته شده، مثال زیاد نزدم و کدی هم ننوشتم. دلیلش هم که خب\nواضحه.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":6,"column":7,"offset":291}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":6,"column":7,"offset":291}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"چند ریختی به ما اجازه میده که برنامه های گسترده ای بنویسیم و درواقع\nبتونیم برنامه نویسی general داشته باشیم بجای اینکه مجبور بشیم به صورت\nخاص برنامه بنویسیم(الآن براش مثالی توی ذهنم ندارم که کوتاه باشه).","position":{"start":{"line":8,"column":1,"offset":293},"end":{"line":10,"column":66,"offset":498}}}],"position":{"start":{"line":8,"column":1,"offset":293},"end":{"line":10,"column":66,"offset":498}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"کلمه‌ی ","position":{"start":{"line":12,"column":4,"offset":503},"end":{"line":12,"column":11,"offset":510}}},{"type":"raw","value":"<code class=\"language-text\">virtual</code>","position":{"start":{"line":12,"column":11,"offset":510},"end":{"line":12,"column":20,"offset":519}}}],"position":{"start":{"line":12,"column":1,"offset":500},"end":{"line":12,"column":20,"offset":519}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"معمولا وقتی از طریق یه پوینتر توابع رو فراخوانی می‌کنیم، توابع مربوط\nبه ","position":{"start":{"line":14,"column":1,"offset":521},"end":{"line":15,"column":4,"offset":594}}},{"type":"text","value":"[جنس اون]","position":{"start":{"line":15,"column":5,"offset":595},"end":{"line":15,"column":12,"offset":602}}},{"type":"text","value":" پوینتر صدا زده میشن نه توابع مربوط به کلاسی که بهش اشاره\nمیشه. یعنی اگه تابعی با دو نسخه(یکی توی کلاس والد و یکی توی کلاس فرزند)\nوجود داشته باشه، اون نسخه ای صدا زده میشه که مربوط به type پوینتره.\nvirtual به وجود اومده تا راه حلی برای این مشکل باشه، برای اینکه موقع صدا\nزدن یه تابع از طریق پوینتر/رفرنس، برنامه چک میکنه که اگر کلاس فرزند\nنسخه‌ی خودش از اون تابع رو داره، همون رو صدا بزنه در غیر این صورت نسخه‌ی\nمربوط به کلاس والد رو صدا می‌زنه.","position":{"start":{"line":15,"column":13,"offset":603},"end":{"line":21,"column":34,"offset":1052}}}],"position":{"start":{"line":14,"column":1,"offset":521},"end":{"line":21,"column":34,"offset":1052}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"درواقع توابع ویرچوال ابن امکان رو فراهم میکنن که بجای فراخوانی تابع مربوط به هندل، تابع مربوط به کلاس اشاره شده فراخوانی بشه.","position":{"start":{"line":23,"column":1,"offset":1054},"end":{"line":23,"column":126,"offset":1179}}}],"position":{"start":{"line":23,"column":1,"offset":1054},"end":{"line":23,"column":126,"offset":1179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"بهتره که برای خوانایی بهتر توی هر سطح که توابع virtual والد رو بازنویسی می‌کنیم، قید کنیم که این یه تابع virtual عه.","position":{"start":{"line":25,"column":1,"offset":1181},"end":{"line":25,"column":117,"offset":1297}}}],"position":{"start":{"line":25,"column":1,"offset":1181},"end":{"line":25,"column":117,"offset":1297}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Dynamic Binding","position":{"start":{"line":27,"column":4,"offset":1302},"end":{"line":27,"column":19,"offset":1317}}}],"position":{"start":{"line":27,"column":1,"offset":1299},"end":{"line":27,"column":19,"offset":1317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"همونطور که بالاتر گفتیم اگر یکی از توابع به شکل virtual تعریف شده\nباشه، و این تابع از طریق یه پوینتر/رفرنس فراخوانی بشه، برنامه خودش تابع\nمناسب رو بر اساس جنسِ شئ ای که داره بهش اشاره میشه انتخاب میکنه. به این\nفرآیند میگن dynamic binding.","position":{"start":{"line":29,"column":1,"offset":1319},"end":{"line":32,"column":29,"offset":1560}}}],"position":{"start":{"line":29,"column":1,"offset":1319},"end":{"line":32,"column":29,"offset":1560}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"کلمه‌ی ","position":{"start":{"line":34,"column":4,"offset":1565},"end":{"line":34,"column":11,"offset":1572}}},{"type":"raw","value":"<code class=\"language-text\">override</code>","position":{"start":{"line":34,"column":11,"offset":1572},"end":{"line":34,"column":21,"offset":1582}}}],"position":{"start":{"line":34,"column":1,"offset":1562},"end":{"line":34,"column":21,"offset":1582}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"وقتی یه تابعی از کلاس والد رو توی کلاس فرزند بازنویسی می‌کنیم، بهتره\nکه از کلمه‌ی override براش استفاده بکنیم، با استفاده کردن این کلمه،\nکامپایلر چک میکنه که آیا تابعی با امضا(signature) مشابه توی کلاس(های)\nوالد وجود داره که بخواد بازنویسی بشه یا نه.","position":{"start":{"line":36,"column":1,"offset":1584},"end":{"line":39,"column":44,"offset":1837}}}],"position":{"start":{"line":36,"column":1,"offset":1584},"end":{"line":39,"column":44,"offset":1837}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"ضرورت ","position":{"start":{"line":41,"column":4,"offset":1842},"end":{"line":41,"column":10,"offset":1848}}},{"type":"raw","value":"<code class=\"language-text\">virtual</code>","position":{"start":{"line":41,"column":10,"offset":1848},"end":{"line":41,"column":19,"offset":1857}}},{"type":"text","value":" کردن destructor","position":{"start":{"line":41,"column":19,"offset":1857},"end":{"line":41,"column":35,"offset":1873}}}],"position":{"start":{"line":41,"column":1,"offset":1839},"end":{"line":41,"column":35,"offset":1873}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"مهمه که اگر میخوایم به صورت چند ریختی از کدمون استفاده بکنیم، حتما destructor رو به صورت virtual تعریف کنیم.","position":{"start":{"line":43,"column":1,"offset":1875},"end":{"line":43,"column":109,"offset":1983}}}],"position":{"start":{"line":43,"column":1,"offset":1875},"end":{"line":43,"column":109,"offset":1983}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"دلیلش اینه که اگر یک اشاره گر از نوع کلاس والد که داره به یک شئ از\nکلاس فرزند اشاره میکنه توسط کلمه‌ی delete پاک بشه، تابع نابودکننده مربوط\nبه خودش صدا زده بشه و نه تابع نابودکننده والد.","position":{"start":{"line":45,"column":1,"offset":1985},"end":{"line":47,"column":47,"offset":2172}}}],"position":{"start":{"line":45,"column":1,"offset":1985},"end":{"line":47,"column":47,"offset":2172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"کلمه‌ی ","position":{"start":{"line":49,"column":4,"offset":2177},"end":{"line":49,"column":11,"offset":2184}}},{"type":"raw","value":"<code class=\"language-text\">default</code>","position":{"start":{"line":49,"column":11,"offset":2184},"end":{"line":49,"column":20,"offset":2193}}}],"position":{"start":{"line":49,"column":1,"offset":2174},"end":{"line":49,"column":20,"offset":2193}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"چیز جدیدی که به سی++ ۱۱ اضافه شده کلمه‌ی default هست. وقتی میخوایم یه\nکانستراکتور و یا دیستراکتور پیش فرض داشته باشیم دیگه نیاز نیست که یه\nتابع با بدنه‌ی خالی بنویسیم. فقط کافیه توی اعلان، اون تابع رو default\nکنیم.","position":{"start":{"line":51,"column":1,"offset":2195},"end":{"line":54,"column":6,"offset":2411}}}],"position":{"start":{"line":51,"column":1,"offset":2195},"end":{"line":54,"column":6,"offset":2411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"کلمه‌ی ","position":{"start":{"line":56,"column":4,"offset":2416},"end":{"line":56,"column":11,"offset":2423}}},{"type":"raw","value":"<code class=\"language-text\">final</code>","position":{"start":{"line":56,"column":11,"offset":2423},"end":{"line":56,"column":18,"offset":2430}}}],"position":{"start":{"line":56,"column":1,"offset":2413},"end":{"line":56,"column":18,"offset":2430}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"وقتی از کلمه‌ی final برای یه تابع استفاده میشه، دیگه کامپایلر اجازه\nنمیده که اون تابع توی کلاس های فرزند بازنویسی و override بشه. ","position":{"start":{"line":58,"column":1,"offset":2432},"end":{"line":59,"column":63,"offset":2563}}}],"position":{"start":{"line":58,"column":1,"offset":2432},"end":{"line":59,"column":63,"offset":2563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"وقتی از کلمه‌ی final برای تعریف یه کلاس استفاده بشه، کامپایلر اجازه نمیده که کلاس های دیگه از این کلاس ارث بری داشته باشن.","position":{"start":{"line":61,"column":1,"offset":2565},"end":{"line":61,"column":123,"offset":2687}}}],"position":{"start":{"line":61,"column":1,"offset":2565},"end":{"line":61,"column":123,"offset":2687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"کلاس Abstract","position":{"start":{"line":63,"column":4,"offset":2692},"end":{"line":63,"column":17,"offset":2705}}}],"position":{"start":{"line":63,"column":1,"offset":2689},"end":{"line":63,"column":17,"offset":2705}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"تا اینجا ما میتونستیم از کلاس هامون اشیاء ای رو بسازیم. اما یه سری\nکلاس های دیگه هم وجود دارن که نمیشه ازشون هیچ شئ ای ساخت که به این کلاس\nها میگن Abstract. به کلاس های معمولی میگن concrete.","position":{"start":{"line":65,"column":1,"offset":2707},"end":{"line":67,"column":52,"offset":2899}}}],"position":{"start":{"line":65,"column":1,"offset":2707},"end":{"line":67,"column":52,"offset":2899}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"کلاسی رو میشه ابسترکت نامید که حداقل یکی از توابع virtual اش به صورت pure باشه.","position":{"start":{"line":69,"column":1,"offset":2901},"end":{"line":69,"column":80,"offset":2980}}}],"position":{"start":{"line":69,"column":1,"offset":2901},"end":{"line":69,"column":80,"offset":2980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"برای اینکه یک تابع رو pure کنیم، باید اعلان تابع رو برابر 0 قرار بدیم\nکه اون 0 نشان pure specifier هست. با pure اعلام کردن یک تابع دیگه نباید\nبراش پیاده سازی ای نوشت بنابراین همه‌ی کلاس های فرزند باید توابع pure\nرو پیاده سازی کنن وگرنه خودشونم ابسترکت میشن.","position":{"start":{"line":71,"column":1,"offset":2982},"end":{"line":74,"column":46,"offset":3240}}}],"position":{"start":{"line":71,"column":1,"offset":2982},"end":{"line":74,"column":46,"offset":3240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"چندریختی به صورت عمیق تر!","position":{"start":{"line":76,"column":4,"offset":3245},"end":{"line":76,"column":29,"offset":3270}}}],"position":{"start":{"line":76,"column":1,"offset":3242},"end":{"line":76,"column":29,"offset":3270}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"یه رفتار پلی مورفیک از سه سطح از پوینتر ها تشکیل شده. ","position":{"start":{"line":78,"column":1,"offset":3272},"end":{"line":78,"column":55,"offset":3326}}}],"position":{"start":{"line":78,"column":1,"offset":3272},"end":{"line":78,"column":55,"offset":3326}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"مرحله اول، vtable","position":{"start":{"line":80,"column":6,"offset":3333},"end":{"line":80,"column":23,"offset":3350}}}],"position":{"start":{"line":80,"column":1,"offset":3328},"end":{"line":80,"column":23,"offset":3350}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"وقتی کامپایلر کلاسی که دارای توابع virtual عه رو کامپایل میکنه، برای\nاون کلاس یدونه Virtual function Table (vtable) میسازه. کار این جدول چیه؟\nآدرس توابع virtual شده‌ی اون کلاس رو داخل خودش ذخیره می‌کنه. وقتی در\nزمان اجرا میخوایم با استفاده از dynamic binding یه تابع virtual رو\nفراخوانی کنیم، برنامه توی vtable کلاس مربوطه میگرده تا تابع درست رو پیدا\nو اجرا بکنه.","position":{"start":{"line":82,"column":1,"offset":3352},"end":{"line":87,"column":13,"offset":3718}}}],"position":{"start":{"line":82,"column":1,"offset":3352},"end":{"line":87,"column":13,"offset":3718}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"مرحله دوم","position":{"start":{"line":89,"column":6,"offset":3725},"end":{"line":89,"column":15,"offset":3734}}}],"position":{"start":{"line":89,"column":1,"offset":3720},"end":{"line":89,"column":15,"offset":3734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"وقتی یه آبجکت از یک کلاس دارای توابع ویرچوال ساخته میشه، کامپایلر","position":{"start":{"line":91,"column":1,"offset":3736},"end":{"line":91,"column":66,"offset":3801}}},{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":91,"column":66,"offset":3801},"end":{"line":92,"column":1,"offset":3804}}},{"type":"text","value":"\n"},{"type":"text","value":"به اون آبجکت یه پوینتر اختصاص میده(این پوینتر رو معمولا در اول آبجکت\nمیذاره) که اون پوینتر به vtable مربوط به اون کلاس اشاره می‌کنه.","position":{"start":{"line":92,"column":1,"offset":3804},"end":{"line":93,"column":64,"offset":3937}}}],"position":{"start":{"line":91,"column":1,"offset":3736},"end":{"line":93,"column":64,"offset":3937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"مرحله سوم","position":{"start":{"line":95,"column":6,"offset":3944},"end":{"line":95,"column":15,"offset":3953}}}],"position":{"start":{"line":95,"column":1,"offset":3939},"end":{"line":95,"column":15,"offset":3953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"پوینتریه که به خودِ شئ اشاره می‌کنه. به عنوان مثال ما یک وکتور از\nهمه اشیاء از کلاس های مشتق شده از کلاس A داریم. پوینتر هایی که توی این\nوکتور هستند(که به اشیاء اشاره می‌کنن) به عنوان سطح سوم پوینتر ها محسوب\nمیشن.","position":{"start":{"line":97,"column":1,"offset":3955},"end":{"line":100,"column":6,"offset":4171}}}],"position":{"start":{"line":97,"column":1,"offset":3955},"end":{"line":100,"column":6,"offset":4171}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"بنابراین برای اجرای یه تابع ویرچوال که به صورت dynamic binding میخواد\nصدا زده بشه، حداقل ۳ بار pointer dereferencing اتفاق میوفته که این موجب\nافزایش زمان اجرایی میشه. همچنین ذخیره کردن پوینتر مرحله ۲ و خودِ vtable\nهم باعث استفاده بیشتر از مموری میشه. اگر پرفورمنس و سرعت توی برنامه ای\nکه داریم می‌نویسیم یک اصل بسیار مهم و سفت و سخته،‌ بهتره که از پلی\nمورفیسم استفاده نکنیم.","position":{"start":{"line":102,"column":1,"offset":4173},"end":{"line":107,"column":23,"offset":4549}}}],"position":{"start":{"line":102,"column":1,"offset":4173},"end":{"line":107,"column":23,"offset":4549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"RunTime Type Information","position":{"start":{"line":109,"column":4,"offset":4554},"end":{"line":109,"column":28,"offset":4578}}}],"position":{"start":{"line":109,"column":1,"offset":4551},"end":{"line":109,"column":28,"offset":4578}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"تا اینجا وقتی به صورت پلی‌مورفیسم کار می‌کردیم، نیاز نبود بدونیم هر\nآبجکت دقیقا از چه نوعیه. اما ممکنه گاهی این نیاز رو پیدا بکنیم. با\nاستفاده از قابلیت RTTI یا همون RunTime Type Information و قابلیت dynamic\ncast میتونیم در زمان اجرا بفهمیم که شئ ما از چه نوعیه و رفتار متناسب با\nخودش رو باهاش انجام بدیم. با استفاده از dymanic","position":{"start":{"line":111,"column":1,"offset":4580},"end":{"line":115,"column":48,"offset":4909}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"cast میتونیم یه اشاره\nگر از جنس کلاس والد رو که داره به یکی از کلاس های فرزند اشاره می‌کنه به\nیک اشاره گر از نوع خودِ کلاس فرزند تغییر بدیم. فرقش با static","position":{"start":{"line":115,"column":49,"offset":4910},"end":{"line":117,"column":62,"offset":5067}}}],"position":{"start":{"line":115,"column":48,"offset":4909},"end":{"line":117,"column":63,"offset":5068}}},{"type":"text","value":"cast اینه\nکه تایپ چک انجام میده و اگر کلاسی که داره بهش اشاره میشه از نوع کلاسی\nنباشه که میخواد بهش cast بشه، تبدیل انجام نمیشه.","position":{"start":{"line":117,"column":63,"offset":5068},"end":{"line":119,"column":49,"offset":5198}}}],"position":{"start":{"line":111,"column":1,"offset":4580},"end":{"line":119,"column":49,"offset":5198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"همچنین با استفاده از typeid میتونیم در زمان اجرا بفهمیم که یه شئ از\nچه نوعیه. با استفاده از متود name اش میتونیم اسم جنسِ یه شئ رو به صورت\nیه رشته بگیریم.","position":{"start":{"line":121,"column":1,"offset":5200},"end":{"line":123,"column":16,"offset":5356}}}],"position":{"start":{"line":121,"column":1,"offset":5200},"end":{"line":123,"column":16,"offset":5356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"در پایان","position":{"start":{"line":125,"column":4,"offset":5361},"end":{"line":125,"column":12,"offset":5369}}}],"position":{"start":{"line":125,"column":1,"offset":5358},"end":{"line":125,"column":12,"offset":5369}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"فصل بعدی توی I/O بیشتر عمیق میشیم.","position":{"start":{"line":127,"column":1,"offset":5371},"end":{"line":127,"column":35,"offset":5405}}}],"position":{"start":{"line":127,"column":1,"offset":5371},"end":{"line":127,"column":35,"offset":5405}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":128,"column":1,"offset":5406}}}}