{"expireTime":9007200880603432000,"key":"transformer-remark-markdown-html-ast-dce4028414b131c5711ccb57573993b9-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"در ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":4,"offset":4}}},{"type":"element","tagName":"a","properties":{"href":"https://seedpuller.ir/posts/concurrency-in-cpp-chapter3-1/","target":"_blank","rel":"nofollow"},"children":[{"type":"text","value":"پست قبل","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":12,"offset":12}}}],"position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":73,"offset":73}}},{"type":"text","value":" درباره اینکه میوتکس(mutex) ها چی هستن و چطور می‌تونیم ازشون استفاده کنیم صحبت کردیم. رسیدیم به جایی که قرار بود Race Condition هایی که در ذات interface ما وجود داشتن رو پیدا و رفع کنیم :) بریم ببینیم چی میشه.","position":{"start":{"line":2,"column":73,"offset":73},"end":{"line":2,"column":282,"offset":282}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":282,"offset":282}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"این پست رو دارم با ماوس و کیبورد و هدست(که یه موسیقی بی‌کلام ملایم پخش می‌کنم که باهاش صدای بیرون رو نشنوم. درسته که خودش موجب می‌شه تمرکزم کم باشه اما حداقل کافیه که با یه صدا مبارزه کنم نه با صدجور صدای مختلف) جدیدم که دوستای بسیار عزیزم برام خریدن می‌نویسم و بابتش ذوق هم دارم.","position":{"start":{"line":4,"column":1,"offset":284},"end":{"line":4,"column":281,"offset":564}}}],"position":{"start":{"line":4,"column":1,"offset":284},"end":{"line":4,"column":281,"offset":564}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"یافتن Race condition ذاتی در interface ها","position":{"start":{"line":6,"column":4,"offset":569},"end":{"line":6,"column":45,"offset":610}}}],"position":{"start":{"line":6,"column":1,"offset":566},"end":{"line":6,"column":45,"offset":610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"صرف استفاده از میوتکس ها یا هر مکانیزم حفاظتی دیگه ای دلیل نمیشه که به کلی از race condition ها در امان باشیم. هنوز هم نیاز به انجام اعمال دیگری داریم. یک ","position":{"start":{"line":8,"column":1,"offset":612},"end":{"line":8,"column":156,"offset":767}}},{"type":"raw","value":"<code class=\"language-text\">std::stack</code>","position":{"start":{"line":8,"column":156,"offset":767},"end":{"line":8,"column":168,"offset":779}}},{"type":"text","value":" رو در نظر می‌گیریم که اعمال درونیش(","position":{"start":{"line":8,"column":168,"offset":779},"end":{"line":8,"column":204,"offset":815}}},{"type":"raw","value":"<code class=\"language-text\">push</code>","position":{"start":{"line":8,"column":204,"offset":815},"end":{"line":8,"column":210,"offset":821}}},{"type":"text","value":" و ","position":{"start":{"line":8,"column":210,"offset":821},"end":{"line":8,"column":213,"offset":824}}},{"type":"raw","value":"<code class=\"language-text\">pop</code>","position":{"start":{"line":8,"column":213,"offset":824},"end":{"line":8,"column":218,"offset":829}}},{"type":"text","value":" و ","position":{"start":{"line":8,"column":218,"offset":829},"end":{"line":8,"column":221,"offset":832}}},{"type":"raw","value":"<code class=\"language-text\">top</code>","position":{"start":{"line":8,"column":221,"offset":832},"end":{"line":8,"column":226,"offset":837}}},{"type":"text","value":" و ","position":{"start":{"line":8,"column":226,"offset":837},"end":{"line":8,"column":229,"offset":840}}},{"type":"raw","value":"<code class=\"language-text\">empty</code>","position":{"start":{"line":8,"column":229,"offset":840},"end":{"line":8,"column":236,"offset":847}}},{"type":"text","value":") با استفاده از میوتکس حفاظت شده.\nفرض کنیم ترد های ما همچین کدی رو می‌خوان اجرا بکنن:","position":{"start":{"line":8,"column":236,"offset":847},"end":{"line":9,"column":52,"offset":932}}}],"position":{"start":{"line":8,"column":1,"offset":612},"end":{"line":9,"column":52,"offset":932}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> value<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// checkpoint 1</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// checkpoint 2</span>\n\t<span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":11,"column":1,"offset":934},"end":{"line":17,"column":4,"offset":1053}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"فرض کنیم داخل استک ما فقط یک عضو وجود داشته باشه و هر دو ترد ما رسیده باشن به ","position":{"start":{"line":19,"column":1,"offset":1055},"end":{"line":19,"column":79,"offset":1133}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"checkpoint 1","position":{"start":{"line":19,"column":80,"offset":1134},"end":{"line":19,"column":92,"offset":1146}}}],"position":{"start":{"line":19,"column":79,"offset":1133},"end":{"line":19,"column":93,"offset":1147}}},{"type":"text","value":". ترد اول میاد و عملیات ","position":{"start":{"line":19,"column":93,"offset":1147},"end":{"line":19,"column":117,"offset":1171}}},{"type":"raw","value":"<code class=\"language-text\">pop()</code>","position":{"start":{"line":19,"column":117,"offset":1171},"end":{"line":19,"column":124,"offset":1178}}},{"type":"text","value":" رو انجام می‌ده. حالا وقتی ترد دوم به ","position":{"start":{"line":19,"column":124,"offset":1178},"end":{"line":19,"column":162,"offset":1216}}},{"type":"raw","value":"<code class=\"language-text\">pop()</code>","position":{"start":{"line":19,"column":162,"offset":1216},"end":{"line":19,"column":169,"offset":1223}}},{"type":"text","value":" می‌رسه چه اتفاقی رخ می‌ده؟ مشخصه! ","position":{"start":{"line":19,"column":169,"offset":1223},"end":{"line":19,"column":204,"offset":1258}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"!undefined behavior","position":{"start":{"line":19,"column":206,"offset":1260},"end":{"line":19,"column":225,"offset":1279}}}],"position":{"start":{"line":19,"column":204,"offset":1258},"end":{"line":19,"column":227,"offset":1281}}},{"type":"text","value":" ","position":{"start":{"line":19,"column":227,"offset":1281},"end":{"line":19,"column":228,"offset":1282}}}],"position":{"start":{"line":19,"column":1,"offset":1055},"end":{"line":19,"column":228,"offset":1282}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"به این می‌گن یک race condition ذاتی که در رابط یا همون interface وجود داره. حتی اگه lock-free هم برنامه نویسی کرده باشیم باز هم این مشکل پابرجاست و ربطی به میوتکس و ... نداره. مشکل از رابط است.\nراه حلش چیه؟ اینکه بیایم و تغییراتی که میخوایم انجام بدیم رو در یک قدم خلاصه کنیم. یعنی مثلا تابعی داشته باشیم که هم بالاترین عضو پشته رو حذف کنه و هم عضو حذف شده رو برگردونه. چرا خود نویسندگان عزیز کتابخانه استاندارد اینطوری ننوشتن که ما راحت باشیم؟ برای اینکه چیز های دیگه ای مثل Exception Safety هم وجود داره عزیزجان! و دقیقا بخاطر همین مسئله باید این دو کار به شکل جدا از هم انجام بشن! بهرحال برای اینکه ما بتونیم یک اینترفیس امن برای ترد هامون داشته باشیم نیاز داریم که این دو عملیات(","position":{"start":{"line":21,"column":1,"offset":1284},"end":{"line":22,"column":490,"offset":1967}}},{"type":"raw","value":"<code class=\"language-text\">top</code>","position":{"start":{"line":22,"column":490,"offset":1967},"end":{"line":22,"column":495,"offset":1972}}},{"type":"text","value":" و ","position":{"start":{"line":22,"column":495,"offset":1972},"end":{"line":22,"column":498,"offset":1975}}},{"type":"raw","value":"<code class=\"language-text\">pop</code>","position":{"start":{"line":22,"column":498,"offset":1975},"end":{"line":22,"column":503,"offset":1980}}},{"type":"text","value":" ) رو یکی کنیم. راه حل چیست؟","position":{"start":{"line":22,"column":503,"offset":1980},"end":{"line":22,"column":531,"offset":2008}}}],"position":{"start":{"line":21,"column":1,"offset":1284},"end":{"line":22,"column":531,"offset":2008}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"راه اول: پاس دادن یک ارجاع(رفرنس) به تابع","position":{"start":{"line":24,"column":3,"offset":2012},"end":{"line":24,"column":44,"offset":2053}}}],"position":{"start":{"line":24,"column":1,"offset":2010},"end":{"line":24,"column":46,"offset":2055}}}],"position":{"start":{"line":24,"column":1,"offset":2010},"end":{"line":24,"column":46,"offset":2055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"راه اول اینه که بیایم و یک رفرنس از یک متغییر به تابع بدیم که برامون با محتویات عضوی که میخواد از استک حذف بشه، پُرش کنه.\nمثلا به این شکل:","position":{"start":{"line":26,"column":1,"offset":2057},"end":{"line":27,"column":17,"offset":2195}}}],"position":{"start":{"line":26,"column":1,"offset":2057},"end":{"line":27,"column":17,"offset":2195}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span>\nsome_stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":28,"column":1,"offset":2196},"end":{"line":31,"column":4,"offset":2255}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"البته این راه هم مشکلات خودش رو داره. از جمله اینکه، نیازمند این هست که یک متغییر از نوع متغییر های موجود در استک ساخته بشه(که بتونیم پاسش بدیم). خب این برای Type هایی که ساختنشون منابع زیادی مصرف میشه مناسب نیست. ","position":{"start":{"line":32,"column":1,"offset":2256},"end":{"line":32,"column":215,"offset":2470}}}],"position":{"start":{"line":32,"column":1,"offset":2256},"end":{"line":32,"column":215,"offset":2470}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"محدودیت بعدی اینه که اون Type مورد نظر باید Assignable باشه. ","position":{"start":{"line":34,"column":1,"offset":2472},"end":{"line":34,"column":62,"offset":2533}}}],"position":{"start":{"line":34,"column":1,"offset":2472},"end":{"line":34,"column":62,"offset":2533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"راه دوم: استفاده از copy/move constructor هایی که استثنا پرتاب نمی‌کنند","position":{"start":{"line":36,"column":3,"offset":2537},"end":{"line":36,"column":74,"offset":2608}}}],"position":{"start":{"line":36,"column":1,"offset":2535},"end":{"line":36,"column":76,"offset":2610}}}],"position":{"start":{"line":36,"column":1,"offset":2535},"end":{"line":36,"column":76,"offset":2610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"تنها دلیلی که نیاز داریم ","position":{"start":{"line":38,"column":1,"offset":2612},"end":{"line":38,"column":26,"offset":2637}}},{"type":"raw","value":"<code class=\"language-text\">top</code>","position":{"start":{"line":38,"column":26,"offset":2637},"end":{"line":38,"column":31,"offset":2642}}},{"type":"text","value":" و ","position":{"start":{"line":38,"column":31,"offset":2642},"end":{"line":38,"column":34,"offset":2645}}},{"type":"raw","value":"<code class=\"language-text\">pop</code>","position":{"start":{"line":38,"column":34,"offset":2645},"end":{"line":38,"column":39,"offset":2650}}},{"type":"text","value":" از هم جدا باشن همین مسئله Exception Safety هست. حالا اگر Type ای که می‌خوایم استفاده کنیم دارای Move Constructor و Copy Constructor ای باشه که استثنا(Exception) پرتاب نکنه، دیگه مشکلی نیست و میتونیم به راحتی این دو عملیات رو یکی کنیم.","position":{"start":{"line":38,"column":39,"offset":2650},"end":{"line":38,"column":274,"offset":2885}}}],"position":{"start":{"line":38,"column":1,"offset":2612},"end":{"line":38,"column":274,"offset":2885}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"بنابراین می‌تونیم این محدودیت رو بذاریم که فقط Type هایی که یکی از سازنده‌های(Constructors) بالا رو دارن قابل استفاده در استک باشن. اما خب این راه هم زیادی محدود کننده‌ست.","position":{"start":{"line":40,"column":1,"offset":2887},"end":{"line":40,"column":172,"offset":3058}}}],"position":{"start":{"line":40,"column":1,"offset":2887},"end":{"line":40,"column":172,"offset":3058}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"راه سوم: یک اشاره‌گر به آیتمی که حذف می‌شه برگردونیم","position":{"start":{"line":42,"column":3,"offset":3062},"end":{"line":42,"column":55,"offset":3114}}}],"position":{"start":{"line":42,"column":1,"offset":3060},"end":{"line":42,"column":57,"offset":3116}}}],"position":{"start":{"line":42,"column":1,"offset":3060},"end":{"line":42,"column":57,"offset":3116}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"راه سوم اینه که بجای اینکه محتوای آیتم رو کپی کنیم، بیایم و صرفا یک اشاره‌گر از اون آیتم رو برگردونیم و به این ترتیب مشکل استثنا رو حل کنیم چرا که کپی کردن یه پوینتر ایجاد استثنا نمی‌کنه. ولی خب این راه هم مشکلات خودش رو داره:","position":{"start":{"line":44,"column":1,"offset":3118},"end":{"line":44,"column":227,"offset":3344}}}],"position":{"start":{"line":44,"column":1,"offset":3118},"end":{"line":44,"column":227,"offset":3344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"باید حواسمون به مدیریت حافظه باشه","position":{"start":{"line":46,"column":3,"offset":3348},"end":{"line":46,"column":36,"offset":3381}}}],"position":{"start":{"line":46,"column":1,"offset":3346},"end":{"line":46,"column":36,"offset":3381}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"مدیریت حافظه برای Type های کوچیکی مثل Integer ها نمی‌صرفه و فقط بار اضافه‌ست","position":{"start":{"line":47,"column":3,"offset":3384},"end":{"line":47,"column":79,"offset":3460}}}],"position":{"start":{"line":47,"column":1,"offset":3382},"end":{"line":47,"column":79,"offset":3460}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":3346},"end":{"line":47,"column":79,"offset":3460}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"برای اولی می‌تونیم از اشاره‌گر های هوشمند استفاده بکنیم؛ مخصوصا ","position":{"start":{"line":49,"column":1,"offset":3462},"end":{"line":49,"column":65,"offset":3526}}},{"type":"raw","value":"<code class=\"language-text\">std::shared_ptr</code>","position":{"start":{"line":49,"column":65,"offset":3526},"end":{"line":49,"column":82,"offset":3543}}},{"type":"text","value":" اینجا خیلی میتونه مفید باشه.\nبرای دومی هم میتونیم یه کار دیگه بکنیم؛ اونم اینکه از راه اول یا دوم هم در کنار راه سوم استفاده کنیم (:","position":{"start":{"line":49,"column":82,"offset":3543},"end":{"line":50,"column":104,"offset":3677}}}],"position":{"start":{"line":49,"column":1,"offset":3462},"end":{"line":50,"column":104,"offset":3677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"در نهایت کد استک ما این شکلی می‌شه:","position":{"start":{"line":52,"column":1,"offset":3679},"end":{"line":52,"column":36,"offset":3714}}}],"position":{"start":{"line":52,"column":1,"offset":3679},"end":{"line":52,"column":36,"offset":3714}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;exception></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">empty_stack</span><span class=\"token operator\">:</span> <span class=\"token base-clause\">std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">exception</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">threadsafe_stack</span>\n<span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>stack<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token double-colon punctuation\">::</span>mutex m<span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">threadsafe_stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">threadsafe_stack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> threadsafe_stack<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdata<span class=\"token operator\">=</span>other<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tthreadsafe_stack<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> threadsafe_stack<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>T new_value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>new_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">empty_stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">const</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_shared</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">empty_stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tvalue<span class=\"token operator\">=</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":54,"column":1,"offset":3716},"end":{"line":112,"column":4,"offset":4737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"فکر می‌کنم که کد واضح باشه و نیاز به توضیح نیست. بهرحال، در این کد ما از راه اول و سوم باهمدیگه استفاده کردیم (:","position":{"start":{"line":113,"column":1,"offset":4738},"end":{"line":113,"column":113,"offset":4850}}}],"position":{"start":{"line":113,"column":1,"offset":4738},"end":{"line":113,"column":113,"offset":4850}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"پایان","position":{"start":{"line":115,"column":4,"offset":4855},"end":{"line":115,"column":9,"offset":4860}}}],"position":{"start":{"line":115,"column":1,"offset":4852},"end":{"line":115,"column":9,"offset":4860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"پُست بعدی هم درباره یک مشکل معروف خواهد بود که یجورایی برعکس Race Condition هست و اصطلاحا بهش می‌گن: Dead Lock","position":{"start":{"line":117,"column":1,"offset":4862},"end":{"line":117,"column":111,"offset":4972}}}],"position":{"start":{"line":117,"column":1,"offset":4862},"end":{"line":117,"column":111,"offset":4972}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"امروز روز خوبی بود. با اینکه به همه برنامه هام نرسیدم ولی احساسات بدی نداشتم. کاش همه روزا اینطوری باشن!","position":{"start":{"line":119,"column":1,"offset":4974},"end":{"line":119,"column":105,"offset":5078}}}],"position":{"start":{"line":119,"column":1,"offset":4974},"end":{"line":119,"column":105,"offset":5078}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":120,"column":1,"offset":5079}}}}