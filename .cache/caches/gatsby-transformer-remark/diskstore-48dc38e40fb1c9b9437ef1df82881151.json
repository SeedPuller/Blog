{"expireTime":9007200880603432000,"key":"transformer-remark-markdown-html-65a3977e1edd7167d5e96fc1cb8fb0ab-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":"<p>توی این فصل درمورد <code class=\"language-text\">struct</code> ها، bit field ها، اوپراتور های بیتی (bitwise) و توابع مربوط به دستکاری رشته های در سی صحبت شده.</p>\n<p>البته دو مورد آخر رو من بلد بودم بنابراین توی این پست دربارشون چیزی نمی‌نویسم. راستی، این آخرین فصل کتاب فیزیکیه و یکی دوتا فصل دیگه هستن که باید اینترنتی خریدشون (=</p>\n<h2>structure ها</h2>\n<p>نکته جالب اینکه <code class=\"language-text\">struct</code> ها تقریبا همون کلاس ها هستند و تنها تفاوت‌شون اینه که اعضای یک <code class=\"language-text\">struct</code> بر خلاف کلاس، به صورت پیش‌فرض <code class=\"language-text\">public</code> هست و همچنین نوع ارث بری به صورت پیش‌فرض <code class=\"language-text\">public</code> هست(که در کلاس ها <code class=\"language-text\">private</code> هست).</p>\n<h2><code class=\"language-text\">typedef</code> و <code class=\"language-text\">using</code></h2>\n<p>همونطور که از قبل می‌دونستیم، از typedef برای تعریف کردن alias برای انواع داده هامون استفاده می‌کردیم. مثلا:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">typdef <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> string<span class=\"token punctuation\">;</span></code></pre></div>\n<p>توی سی++ ۱۱ قابلیتی اضافه شده که میشه اینکار رو با استفاده از using انجام داد و عبارت پایین برابر با همون typedef عمل می‌کنه:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">using</span> string <span class=\"token operator\">=</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Binary Literals ها</h2>\n<p>در سی++‌۱۴ میتونیم از Binary Literal ها استفاده بکنیم. </p>\n<p>برای اینکار کافیه که پشت عبارتمون، کاراکتر 0b یا 0B رو قرار بدیم:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> binary<span class=\"token punctuation\">{</span><span class=\"token number\">0b1000000'00000000'00000000'00000000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Bit Field ها</h2>\n<p>‌سی++‌ این امکان رو به ما میده که تعیین کنیم یک عضو خاص(از نوع <code class=\"language-text\">int</code> یا <code class=\"language-text\">enum</code>) یک کلاس یا یک <code class=\"language-text\">struct</code> چقدر از حافظه رو اشغال بکنه(تعداد بیت ها). به عضوی که این قابلیت براش استفاده شده باشه میگن <em>Bit Field</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">BitCard</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">unsigned</span> face <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> suit <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> color <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>با توجه به مثال بالا، اندازهٔ حافظه ای(تعداد بیت ها) که میخوایم عضو ما داشته باشه رو با یک «:» جدا می‌کنیم.</p>\n<p>اصطلاحا به اندازه ای که تعیین می‌کنیم میگن width of the bit field.</p>\n<h3>unnamed bit field</h3>\n<p>سی++ این امکان رو به ما میده که عضوی تعریف بکنیم که به عنوان padding\nاستفاده بشه. این عضو هیچ اسمی نداره و صرفا به تعداد بیت ای که مشخص\nمی‌کنیم، حافظه رو رزرو می‌کنه و اون بخش از حافظه قابل استفاده نیست. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">unsigned</span> a <span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// align to next storage-unit boundary</span>\n<span class=\"token keyword\">unsigned</span> b <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>توی مثال بالا تعیین کردیم که ۳ بیت از حافظه رزرو بشه. </p>\n<p>این رزرو کردن به یک شکل دیگه هم میتونه نوشته بشه و اون هم اینکه تعداد بیت های unnamed رو برابر با صفر قرار بدیم.</p>\n<p>در این حالت خود کامپایلر میاد و هرچقدر که فضا در اون واحد حافظه باقی\nمونده رو رزرو می‌کنه. عضو بعدی ای که تعریف می‌کنیم در یک واحد دیگه قرار\nمی‌گیره.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">unsigned</span> a <span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// align to next storage-unit boundary</span>\n<span class=\"token keyword\">unsigned</span> b <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>نکات بیت فیلد ها</h3>\n<ul>\n<li>نباید با استفاده از اوپراتور &#x26; سعی کنیم که آدرس یک بیت فیلد رو بگیریم.</li>\n<li>استفاده\nاز بیت فیلد ها باعث میشه که کامپایلر کد کندتری رو تولید بکنه. بخاطر\nاینکه محاسبه های بیشتری برای پیدا کردن آدرس های حافظه باید انجام بده.</li>\n</ul>\n<h2>پایان</h2>\n<p>خب این فصل هم به پایان رسید و رسما فصل های موجود در کتاب pdf «آموزش\nبرنامه نویسی سی++ دایتل» تموم شد. از این به بعد نکات اضافی ای که از\nمنابع دیگه یاد میگیرم رو در پست های جدا می‌نویسم. کتاب جالبی بود </p>"}