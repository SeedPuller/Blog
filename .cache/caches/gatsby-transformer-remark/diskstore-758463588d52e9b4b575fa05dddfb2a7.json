{"expireTime":9007200880603432000,"key":"transformer-remark-markdown-html-d3a3e81cb169c26f3b9e86f5bd36dc57-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":"<p>قبلا وقتی داشتم یه کلاسی می‌نوشتم که چنتا کانستراکتور داشت و اون\nکانستراکتور ها فقط در بخش کوچیکی از کارها باهم تفاوت داشتن، میومدم و\nکدهارو چندبار کپی می‌کردم.</p>\n<p>بعد ها اومدم اون قسمتی که بین‌شون مشترکه رو توی یه تابع دیگه قرار دادم و هرجا که نیاز بود اون رو صدا می‌زدم.</p>\n<p>نمی‌دونستم که سی++ یه قابلیتی داره به اسم <em>constructor delegation</em></p>\n<p>فرض کنیم همچین کدی داریم:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// code to do A</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// code to do A</span>\n        <span class=\"token comment\">// code to do B</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>همونطور که می‌بینیم، کد کانستراکتور اولی توی کانستراکتور دومی کپی\nشده. برای اینکه از اینکار جلوگیری کنیم، از قابلیت delegate کردن\nکانستراکتور ها استفاده می‌کنیم و کد ما این شکلی می‌شه:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// code to do A</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// use Foo() default constructor to do A</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// code to do B</span>\n    <span class=\"token punctuation\">}</span>\n  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>توی این کد وقتی کانستراکتور دومی صدا زده میشه،‌ اول میاد و\nکانستراکتور اولی رو صدا میزنه و بعد میره کد های مربوط به خودش رو اجرا\nمی‌کنه (: خیلیم قشنگ. به کانستراکتور دومی اصطلاحا می‌گن <em>delegator</em>.</p>\n<h2>نکات</h2>\n<ul>\n<li>امکان اینکه کانستراکتور A یک delegate برای کانستراکتور B باشه و\nهمین کانستراکتور B یک delegate برای کانستراکتور A باشه وجود داره. این\nباعث میشه که برنامه شما کرش کنه. پس باید مراقب باشیم که حلقه بی نهایت\nپیش نیاد.</li>\n<li>کانستراکتوری که <em>delegator</em> هست نمیتونه عمل member initialization رو انجام بده. در حالت کلی، یک کانستراکتور نمیتونه همزمان هم <em>initializer</em> باشه و هم <em>delegator</em>.</li>\n</ul>"}