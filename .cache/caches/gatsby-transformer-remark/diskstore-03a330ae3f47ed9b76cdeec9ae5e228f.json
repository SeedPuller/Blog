{"expireTime":9007200880603432000,"key":"transformer-remark-markdown-html-f3ff83da91d7481a2f78b8a257b9dd96-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":"<p>یکی از ویژگی های جالبی که به سی++ ۱۷ اضافه شده، <code class=\"language-text\">std::string_view</code> هست که برای کار با رشته های ثابت خیلی زیاد به کار آدم میاد.</p>\n<p>کد پایین رو ببینید:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> text<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>string str<span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>string more<span class=\"token punctuation\">{</span> str <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> text <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> more <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>توی این کد، با اینکه تنها کاری که ما کردیم چاپ کردن رشته بوده و رشته\nهم ثابت بوده، اما برای همین استفاده ساده ۴ بار از اون رشته کپی گرفته\nشده.</p>\n<p>یک بار رشته ثابت توی کد باینری قرار گرفته. بعد کپی شده توی استک (برای <code class=\"language-text\">text</code>)، و دو بار هم <code class=\"language-text\">std::string</code> ها کپیش کردن برای ساختن شئ خودشون.</p>\n<p>سی++ ۱۷ قابلیتی به اسم string_view اضافه کرده که برای همینکار درست شده (:</p>\n<p>کد پایین رو ببینید:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string_view></span></span>\n  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>string_view text<span class=\"token punctuation\">{</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// view the text \"hello\", which is stored in the binary</span>\n  std<span class=\"token double-colon punctuation\">::</span>string_view str<span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// view of the same \"hello\"</span>\n  std<span class=\"token double-colon punctuation\">::</span>string_view more<span class=\"token punctuation\">{</span> str <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// view of the same \"hello\"</span>\n  \n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> text <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> more <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>توی این کد رشته ما فقط یکبار کپی شده (و اونم توی باینری) و بقیه متغییر های ما به نوعی دارن به همون رشته اصلی اشاره می‌کنن.</p>\n<p>و نکته مثبتش؟ اینکه خیلی از توابع مربوط به <code class=\"language-text\">std::string</code> رو هم ساپورت می‌کنه.</p>\n<h2>تغییر دادن رشته</h2>\n<p>اساسا این کلاس برای رشته های read-only ساخته شده و عملا نمیتونه\nتغییری توی رشته اصلی انجام بده. همونطور که از اسمش معلومه فقط یک view از\nرشته هست.</p>\n<p>یک پنجره رو فرض کنید، شما از طریق پنجره به منظره بیرون نگاه می‌کنید.\nوقتی پرده رو می‌کشید دید شما محدود میشه اما در منظره بیرون تغییری ایجاد\nنمیشه. اما اگر منظره بیرون تغییر کنه، دید شما هم تغییر میکنه.</p>\n<p>این مثال دقیقا برای این کلاس کاربرد داره. اگر رشته اصلی ای که\nstring<em>view باهاش ساخته شده تغییر بکنه، رشتهٔ ای که string</em>view داره\nنمایش میده هم تغییر می‌کنه.</p>\n<p>اگر رشته ای که string<em>view باهاش ساخته شده از بین بره، دیگه نمیشه از\nاون string</em>view استفاده کرد و فراخوانی کردنش یک undefined behaviour هست.</p>\n<p>مثال:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string_view></span></span>\n  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"Gold\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>string_view str<span class=\"token punctuation\">{</span> arr <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Gold</span>\n  \n  <span class=\"token comment\">// Change 'd' to 'f' in arr</span>\n  arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">;</span>\n  \n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> str <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Golf</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>در پایان</h2>\n<ul>\n<li>از این کلاس برای رشته هایی که قرار نیست تغییر بکنن استفاده کنیم.</li>\n<li>برای رشته هایی که قراره تغییر بکنن از همون <code class=\"language-text\">std::string</code> استفاده کنیم.</li>\n</ul>"}