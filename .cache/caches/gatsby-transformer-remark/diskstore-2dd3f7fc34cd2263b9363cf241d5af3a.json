{"expireTime":9007200880603432000,"key":"transformer-remark-markdown-html-70aa069d38bbc89e148b2f43991f518c-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":"<p>موضوع اشاره گر ها همیشه یکی از چالش های زبان هایی مثل سی و سی++ بوده.\nاینکه یه حافظه ای رو از سیستم بگیریم، آزادش کنیم و مراقب باشیم که حافظه\nای که گرفته شده معتبر باشه تا برای استفاده کردن ازش یا آزاد کردنش مشکلی\nپیش نیاد و هزارتا چیز دیگه.</p>\n<p>اشاره گر های هوشمند اومدن تا کار مارو راحت کنن. تا دیگه کمتر ذهن برنامه نویس درگیر امنیت اشاره گر ها و مسائل دیگه باشه.</p>\n<p>بنابراین یکی از ارکان سی++ مدرن میتونه استفاده از اشاره‌گر های هوشمند باشه.</p>\n<p>توی این پست راجع به کلاس <code class=\"language-text\">unique_ptr</code> و make_unique می‌نویسم که <a href=\"https://seedpuller.space/2020/07/27/deitel-chapter17-exception-handling/\" target=\"_blank\" rel=\"nofollow\">قبلا یه اشاره های ریزی بهش کرده بودم</a>.</p>\n<h2>چرا از اشاره‌گر هوشمند استفاده کنیم</h2>\n<p>به این قطعه کد دقت کنید:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n  \n<span class=\"token keyword\">void</span> <span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter an integer: \"</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> x<span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the function returns early, and ptr won’t be deleted!</span>\n  \n    <span class=\"token comment\">// do stuff with ptr here</span>\n  \n    <span class=\"token keyword\">delete</span> ptr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>مشکلی که هست اینه که اگر x = 0 اونوقت یک exception پرتاب میشه و\nهمونجا کار تابع تموم میشه بنابراین برنامه هیچوقت به اون خطی که در اون <code class=\"language-text\">delete</code> نوشته شده نمیرسه و اینجا memory leak یا نشت حافظه رخ میده. </p>\n<p>شاید بگیم خب این یک موضوع ساده‌ست و میشه قبل از پرتاب کردن استثنا،\nبیایم و حافظه رو پاک کنیم. خب این یه کار اضافه برای برنامه نویسه. سخته\nکه برنامه نویس همش حواسش باشه که کجا حافظه گرفته و کجا آزادش نکرده.</p>\n<p>اگر میشد حافظه پویایی که اشاره گر ها بهش اشاره می‌کنن هم مثل متغییر\nها و اشیاء معمولی که وقتی out of scope میشن ازبین میرن، آزاد بشن خیلی\nخوب میشد. </p>\n<p>ایده اشاره گر های هوشمند هم همینه. یک شئ از یک کلاس ساخته میشه که\nوظیفه‌ش نگهداری از حافظه گرفته شده‌ست. همونطور که می‌دونیم وقتی اشیاء\nout of scope می‌شن، ازبین میرن و تابع destructor اونها صدا زده میشه. پس\nفقط کافیه که این کلاس ما در دیستراکتور خودش بیاد و حافظه ای که گرفته شده\nرو <code class=\"language-text\">delete</code> کنه.</p>\n<h2>استفاده از unique_ptr</h2>\n<p>تا قبل از سی++ ۱۱ کلاسی به اسم auto<em>ptr وجود داشت که خیلی مزخرف بود.\nسی++ ۱۱ با معرفی unique</em>ptr اومد و کلاس قبلی رو منسوخ کرد و کلاس\nauto_ptr توی سی++ ۱۷ به کلی حذف شد.</p>\n<p>این کلاس اوپراتور های ستاره(*) و <code class=\"language-text\">-></code> رو overload کرده بنابراین میشه تقریبا مثل پوینتر معمولی ازش استفاده کرد.</p>\n<p>یک مثال ساده از unique_ptr :</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span> <span class=\"token comment\">// for std::unique_ptr</span></span>\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Resource</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Resource acquired\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Resource destroyed\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// allocate a Resource object and have it owned by std::unique_ptr</span>\n    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>Resource<span class=\"token operator\">></span> res<span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// res goes out of scope here, and the allocated Resource is destroyed</span></code></pre></div>\n<p>چون شئ ما روی استک ساخته میشه، وقتی که تابع به اتمام میرسه تمام\nمتغییرها/اشیاء از بین میرن و به این ترتیب تابع دیستراکتور این کلاس میاد و\nحافظه ای که گرفته شده رو آزاد می‌کنه. بدون اینکه نیاز باشه ما نگرانی\nخاصی بابت آزاد شدنش داشته باشیم.</p>\n<h2>مالکیت اشاره گر در unique_ptr</h2>\n<p>این امکان موجود نیست که دو شئ از <code class=\"language-text\">unique_ptr</code> یک اشاره گر مشترک رو مدیریت کنند. به همین دلیل این کلاس توابع مربوط به کپی رو غیرفعال کرده.</p>\n<p>بنابراین برای اینکه محتوای یک شئ از <code class=\"language-text\">unique_ptr</code> رو برابر با شئ دیگری از همین کلاس قرار بدیم باید دوتا نکته رو مدنظر داشته باشیم:</p>\n<ul>\n<li>باید از move semantics استفاده بکنیم. بنابراین اگر مقدار ما r-value نیست باید از <code class=\"language-text\">std::move</code> استفاده بکنیم.</li>\n<li>بعد از اینکار، شئ اولیه ما (که در سمت راست علامت مساوی قرار میگیره) دیگه مسئول مدیریت اون اشاره گر نیست و یک شئ خالی محسوب میشه.</li>\n</ul>\n<p>مثال:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span> <span class=\"token comment\">// for std::unique_ptr</span></span>\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Resource</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Resource acquired\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Resource destroyed\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>Resource<span class=\"token operator\">></span> res1<span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span> Resource<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Resource created here</span>\n    std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>Resource<span class=\"token operator\">></span> res2<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Start as nullptr</span>\n  \n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"res1 is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"not null\\n\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"null\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"res2 is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"not null\\n\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"null\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">// res2 = res1; // Won't compile: copy assignment is disabled</span>\n    res2 <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// res2 assumes ownership, res1 is set to null</span>\n  \n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Ownership transferred\\n\"</span><span class=\"token punctuation\">;</span>\n  \n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"res1 is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"not null\\n\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"null\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"res2 is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"not null\\n\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"null\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// Resource destroyed here when res2 goes out of scope</span></code></pre></div>\n<p>نتیجه این کد به این صورته:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Resource acquired\nres1 is not null\nres2 is null\nOwnership transferred\nres1 is null\nres2 is not null\nResource destroyed</code></pre></div>\n<h2>unique_ptr و آرایه ها</h2>\n<p>خوشبختانه این کلاس میتونه تشخیص بده که چه زمانی باید از<code class=\"language-text\">delete[]</code> استفاده کنه و چه زمانی از <code class=\"language-text\">delete</code> و همچنین باهاش میشه آرایه هم ساخت.</p>\n<h2>std::make_unique</h2>\n<p>این کلاس که توی سی++ ۱۴ اضافه شده این امکان رو فراهم کرده که به سادگی با <code class=\"language-text\">unique_ptr</code> کار کنیم و همچنین از مشکلات احتمالی مثل exception safety و یا تغییر ناخواسته اشاره گر اصلی(که کلاس <code class=\"language-text\">unique_ptr</code> داره ازش نگهداری می‌کنه) جلوگیری می‌کنه.</p>\n<p>فقط کافیه بهش اسم اون type ای که قراره براش حافظه بگیریم رو به عنوان\nآرگومان های تمپلیت بهش بدیم و همچنین آرگومان هایی که میخوایم موقع ساختن\nاون type بهش داده بشه رو به عنوان آرگومان های تابعی به این کلاس بدیم.\nفکر کنم توضیحم گنگ بود بنابراین بهتره که به مثال توجه کنیم:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span> <span class=\"token comment\">// for std::unique_ptr and std::make_unique</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Fraction</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> m_numerator<span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> m_denominator<span class=\"token punctuation\">{</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Fraction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numerator <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> denominator <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n        m_numerator<span class=\"token punctuation\">{</span> numerator <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_denominator<span class=\"token punctuation\">{</span> denominator <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Fraction <span class=\"token operator\">&amp;</span>f1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        out <span class=\"token operator\">&lt;&lt;</span> f1<span class=\"token punctuation\">.</span>m_numerator <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">&lt;&lt;</span> f1<span class=\"token punctuation\">.</span>m_denominator<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a single dynamically allocated Fraction with numerator 3 and denominator 5</span>\n    <span class=\"token comment\">// We can also use automatic type deduction to good effect here</span>\n    <span class=\"token keyword\">auto</span> f1<span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Fraction<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>f1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">// Create a dynamically allocated array of Fractions of length 4</span>\n    <span class=\"token keyword\">auto</span> f2<span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Fraction<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> f2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>خروجی کد هم:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3 / 5\n0 / 1</code></pre></div>\n<p>درکل توصیه میشه که بجای اینکه مستقیما از <code class=\"language-text\">unique_ptr</code> استفاده بشه، از این کلاس استفاده بشه. </p>\n<p>هم بهینه تره و هم امن تر.</p>\n<h2>پاس دادن <code class=\"language-text\">unique_ptr</code> به یک تابع</h2>\n<p>همونطور که بالاتر گفتم، این کلاس توابع مربوط به کپی رو غیرفعال کرده\nبنابراین با استفاده از move semantic ها، وقتی انتقال انجام میشه دیگه شئ\nاولیه مسئول مدیریت حافظه مربوطه نیست. </p>\n<p>بنابراین اگر یک شئ از این کلاس رو با استفاده از move به یک تابع پاس\nبدیم، مالکیتش به شئ داخل تابع منتقل میشه و با تموم شدن کار اون تابع،\nحافظه ما هم (که در بیرون از تابع allocate شده) آزاد میشه.</p>\n<p>برای جلوگیری از این مشکل بهتره که از تابع <code class=\"language-text\">get()</code> استفاده بکنیم.</p>\n<p>مثال زیر:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span> <span class=\"token comment\">// for std::unique_ptr</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Resource</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Resource acquired\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Resource destroyed\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Resource <span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        out <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I am a resource\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token comment\">// The function only uses the resource, so we'll accept a pointer to the resource, not a reference to the whole std::unique_ptr&lt;Resource></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">useResource</span><span class=\"token punctuation\">(</span>Resource <span class=\"token operator\">*</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>res <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n  \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> ptr<span class=\"token punctuation\">{</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_unique</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Resource<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token function\">useResource</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// note: get() used here to get a pointer to the Resource</span>\n  \n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Ending program\\n\"</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// The Resource is destroyed here</span></code></pre></div>\n<p>و خروجی کد هم به این زیبایی هست:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Resource acquired\nI am a resource\nEnding program\nResource destroyed</code></pre></div>\n<h2>پایان</h2>\n<p>در آخر بهتره که بجای اشاره گر خام از اشاره گر هوشمند استفاده بکنیم و همچنین نکات مربوط به اونها رو یادمون بمونه:</p>\n<ul>\n<li>سعی کنیم از make_unique استفاده بکنیم</li>\n<li>وقتی مدیریت یک اشاره گر رو به این کلاس می‌سپریم دیگه نباید اون اشاره گر رو به صورت دستی تغییر بدیم(آزاد کنیم یا هرچیز دیگه)</li>\n<li>نباید دو یا چند شئ از این کلاس از یک حافظه یکسان نگهداری کنن</li>\n</ul>"}