{"expireTime":9007200880603432000,"key":"transformer-remark-markdown-html-ast-e29835557d3b91075b3b90a39e1d36b6-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"خب در پست قبل این مسئله که ترد ها برای استفاده از داده باهم مسابقه می‌دن رو کمی بررسی کردیم و یک راه حل دم دست هم براش پیشنهاد دادیم. توی این پست میخوایم در مورد مشکلی بحث کنیم که یجورایی برعکس Race condition هست. توی این مشکل، ترد ها منتظر همدیگه میمونن که از یه داده ای استفاده کنن. انقدر منتظر میمونن که عملا هیچکدومشون کاری دیگه انجام نمیده. به این مشکل چی میگن؟ می‌گن ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":374,"offset":374}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Dead Lock","position":{"start":{"line":2,"column":375,"offset":375},"end":{"line":2,"column":384,"offset":384}}}],"position":{"start":{"line":2,"column":374,"offset":374},"end":{"line":2,"column":385,"offset":385}}},{"type":"text","value":".","position":{"start":{"line":2,"column":385,"offset":385},"end":{"line":2,"column":386,"offset":386}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":386,"offset":386}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"دِدْلاک(Dead Lock) چیه و چطور حلش کنیم","position":{"start":{"line":4,"column":4,"offset":391},"end":{"line":4,"column":42,"offset":429}}}],"position":{"start":{"line":4,"column":1,"offset":388},"end":{"line":4,"column":42,"offset":429}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"اگه بخوام دقیق‌تر توضیح بدم، فرض کنید دوتا mutex داریم که برای انجام یک عملیات نیازمند این هستیم هر دو این میوتکس ها قفل بشن. حالا فرض کنید که دوتا ترد هم داریم که ترد اولی یکی از اون mutex ها و ترد دوم اون یکی mutex رو قفل کردن. نتیجه این میشه که هر دوی این ترد ها منتظر میمونن تا دومین mutex آزاد بشه تا بتونن قفلش کنن و کار خودشون رو انجام بدن. به این ترتیب هیچکدوم از اونها کاری از پیش نمی‌برن.","position":{"start":{"line":6,"column":1,"offset":431},"end":{"line":6,"column":399,"offset":829}}}],"position":{"start":{"line":6,"column":1,"offset":431},"end":{"line":6,"column":399,"offset":829}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"اساسا زمانی که بیشتر از یک mutex رو قفل کنیم، احتمال بوجود اومدن ددلاک وجود داره. یک راهی که پیشنهاد میشه اینه که همیشه یک ترتیب خاصی رو در قفل کردن میوتکس ها حفظ کنیم. اگه همیشه اول mutex A رو قفل کنیم و بعدش mutex B رو قفل کنیم، به ددلاک نمیخوریم. اما باز هم مثل بقیه جاهای زندگی، همه چیز انقدرا هم ساده نیست. فرض کنید یک تابع ","position":{"start":{"line":8,"column":1,"offset":831},"end":{"line":8,"column":330,"offset":1160}}},{"type":"raw","value":"<code class=\"language-text\">swap(A&amp; a, A&amp;b)</code>","position":{"start":{"line":8,"column":330,"offset":1160},"end":{"line":8,"column":347,"offset":1177}}},{"type":"text","value":" داریم که محتویات a و b رو باهم جابجا می‌کنه. همیشه هم داخل این تابع در ابتدا میوتکس مربوط به آرگومان اولی قفل میشه و سپس میوتکس آرگومان دومی قفل میشه. آیا دیگه Dead Lock نخواهیم داشت؟ نخیر! خواهیم داشت. فرض کنید دوتا ترد داشته باشیم که همزمان سعی کنن محتوای دوتا شئ رو باهم عوض کنن؛ فقط با ترتیب برعکس (:","position":{"start":{"line":8,"column":347,"offset":1177},"end":{"line":8,"column":652,"offset":1482}}}],"position":{"start":{"line":8,"column":1,"offset":831},"end":{"line":8,"column":652,"offset":1482}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// thread 1</span>\n<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// thread 2</span></code></pre></div>","position":{"start":{"line":10,"column":1,"offset":1484},"end":{"line":13,"column":4,"offset":1540}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"همین برای یه ددلاک نا زیبا کافیه (:","position":{"start":{"line":15,"column":1,"offset":1542},"end":{"line":15,"column":36,"offset":1577}}}],"position":{"start":{"line":15,"column":1,"offset":1542},"end":{"line":15,"column":36,"offset":1577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"خوشبختانه دوستان ما در کتابخانه استاندارد همچین چیزی رو پیش‌بینی کردن و برامون ","position":{"start":{"line":17,"column":1,"offset":1579},"end":{"line":17,"column":80,"offset":1658}}},{"type":"raw","value":"<code class=\"language-text\">std::lock</code>","position":{"start":{"line":17,"column":80,"offset":1658},"end":{"line":17,"column":91,"offset":1669}}},{"type":"text","value":" (و در استاندارد ۱۷ به بعد که مورد علاقه من هم هست ","position":{"start":{"line":17,"column":91,"offset":1669},"end":{"line":17,"column":142,"offset":1720}}},{"type":"raw","value":"<code class=\"language-text\">scoped_lock</code>","position":{"start":{"line":17,"column":142,"offset":1720},"end":{"line":17,"column":155,"offset":1733}}},{"type":"text","value":")رو درست کردن. این تابع می‌تونه دوتا ‌میوتکس رو به شکل همزمان قفل کنه و اگه یکی از میوتکس ها آزاد نباشه، بلافاصله اون یکی رو آزاد می‌کنه. یعنی اینطوری که: یا هردو یا هیچکدوم!","position":{"start":{"line":17,"column":155,"offset":1733},"end":{"line":17,"column":329,"offset":1907}}}],"position":{"start":{"line":17,"column":1,"offset":1579},"end":{"line":17,"column":329,"offset":1907}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">some_big_object</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>some_big_object<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span>some_big_object<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    some_big_object some_detail<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>mutex m<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">X</span><span class=\"token punctuation\">(</span>some_big_object <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> sd<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">some_detail</span><span class=\"token punctuation\">(</span>sd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>X<span class=\"token operator\">&amp;</span> lhs<span class=\"token punctuation\">,</span> X<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lhs<span class=\"token operator\">==</span><span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span>rhs<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock_a</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>adopt_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock_b</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>adopt_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 3 lines above could brief in: scoped_lock(lhs.m, rhs.m)</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">.</span>some_detail<span class=\"token punctuation\">,</span>rhs<span class=\"token punctuation\">.</span>some_detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":19,"column":1,"offset":1909},"end":{"line":40,"column":4,"offset":2500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"راه های دیگه","position":{"start":{"line":42,"column":4,"offset":2505},"end":{"line":42,"column":16,"offset":2517}}}],"position":{"start":{"line":42,"column":1,"offset":2502},"end":{"line":42,"column":16,"offset":2517}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"از قفل کردن های تو در تو بپرهیزید","position":{"start":{"line":44,"column":5,"offset":2523},"end":{"line":44,"column":38,"offset":2556}}}],"position":{"start":{"line":44,"column":1,"offset":2519},"end":{"line":44,"column":38,"offset":2556}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"مسئله ساده‌ست. اول اینکه سعی کنید تا جای ممکن بیشتر از یدونه mutex رو قفل نکنید. اگر مجبور بودیم، حداقل میوتکس ها رو به صورت همزمان- حالا با استفاده از ","position":{"start":{"line":46,"column":1,"offset":2558},"end":{"line":46,"column":153,"offset":2710}}},{"type":"raw","value":"<code class=\"language-text\">std::lock</code>","position":{"start":{"line":46,"column":153,"offset":2710},"end":{"line":46,"column":164,"offset":2721}}},{"type":"text","value":" یا ","position":{"start":{"line":46,"column":164,"offset":2721},"end":{"line":46,"column":168,"offset":2725}}},{"type":"raw","value":"<code class=\"language-text\">std::scoped_lock</code>","position":{"start":{"line":46,"column":168,"offset":2725},"end":{"line":46,"column":186,"offset":2743}}},{"type":"text","value":")- قفل کنید.","position":{"start":{"line":46,"column":186,"offset":2743},"end":{"line":46,"column":198,"offset":2755}}}],"position":{"start":{"line":46,"column":1,"offset":2558},"end":{"line":46,"column":198,"offset":2755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"قفل کردن با ترتیب معین و مشخص","position":{"start":{"line":48,"column":5,"offset":2761},"end":{"line":48,"column":34,"offset":2790}}}],"position":{"start":{"line":48,"column":1,"offset":2757},"end":{"line":48,"column":34,"offset":2790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"قبل تر هم گفتم، اگه با ترتیب خاصی این قفل کردن رو انجام بدیم با تقریب خوبی زیاد به مشکل نمی‌خوریم. اگه مجبوریم دوتا میوتکس رو جدا جدا قفل کنیم، بهتره که ترتیبشون رو در همه جا رعایت بکنیم. ولی خب اینکار هم نیازمند مراقبت های دیگه‌ست. به عنوان مثال یک لیست دو پیوندی رو در نظر بگیرید. برای پیمایش این  لیست ما میایم و هر گره ای که میخوایم بخونیم رو قفل می‌کنیم و برای حرکت کردن هم میایم گره بعدی/قبلی رو قفل می‌کنیم و گره فعلی رو آزاد می‌کنیم. اینجا هم مشکل هست. اگر دوتا ترد به شکل همزمان ولی با جهت عکس همدیگه(یعنی یکی از اول لیست بره آخر و اون یکی برعکس) شروع به پیمایش لیست بکنن، در وسط لیست به dead lock میخورن. راه حل اینه که یک محدودیت اضافی بذاریم که فقط یکی از نحوات پیمایش کردن مجاز باشه :) پس باید حواسمون به خیلی چیزا باشه.","position":{"start":{"line":50,"column":1,"offset":2792},"end":{"line":50,"column":734,"offset":3525}}}],"position":{"start":{"line":50,"column":1,"offset":2792},"end":{"line":50,"column":734,"offset":3525}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://mark.nl.tab.digital/s/Ejd85qkYcKAAP84/preview","alt":"picture"},"children":[],"position":{"start":{"line":52,"column":1,"offset":3527},"end":{"line":52,"column":66,"offset":3592}}},{"type":"text","value":"{: .normal }\n","position":{"start":{"line":52,"column":66,"offset":3592},"end":{"line":53,"column":1,"offset":3605}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"اگه در این وضعیت دوتا ترد مخالف جهت همدیگه شروع به حرکتت کنن،‌ ددلاک خواهیم داشت","position":{"start":{"line":53,"column":2,"offset":3606},"end":{"line":53,"column":82,"offset":3686}}}],"position":{"start":{"line":53,"column":1,"offset":3605},"end":{"line":53,"column":83,"offset":3687}}}],"position":{"start":{"line":52,"column":1,"offset":3527},"end":{"line":53,"column":83,"offset":3687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"استفاده از قفل های سلسله‌مراتبی","position":{"start":{"line":55,"column":5,"offset":3693},"end":{"line":55,"column":36,"offset":3724}}}],"position":{"start":{"line":55,"column":1,"offset":3689},"end":{"line":55,"column":36,"offset":3724}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ایده کلی‌ش تقریبا همون راه قبلیه فقط با این تفاوت که میایم و یک Lock hierarchy درست می‌کنیم که بیاد در runtime چک کنه که آیا ترتیب قفل شدن میوتکس ها صحیحه یا نه. اینطوری کمتر نیاز داریم که «خودمون حواسمون جمع باشه که ترتیب رو رعایت کنیم».","position":{"start":{"line":57,"column":1,"offset":3726},"end":{"line":57,"column":239,"offset":3964}}}],"position":{"start":{"line":57,"column":1,"offset":3726},"end":{"line":57,"column":239,"offset":3964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"حالا این ایده چطوری کار می‌کنه؟ اینطوری که میایم و برنامه‌مون رو به لایه های مختلف تقسیم می‌کنیم و مشخص می‌کنیم که هر میوتکس مربوط به کدوم لایه‌ست. قانون قفل کردن رو هم اینطوری قرار می‌دیم که فقط از بالا به پایین امکان قفل کردن وجود داشته باشه. یعنی اگر فرض کنیم لایه ۱ بالای لایه ۲ و لایه ۲ هم بالای لایهٔ ۳ قرار داشته باشه و الی آخر، فقط تنها زمانی می‌تونیم مثلا لایه ۲ رو قفل کنیم که لایه های پایین ترش آزاد باشن. بنابراین فقط می‌تونیم از بالا به پایین حرکت کنیم.","position":{"start":{"line":59,"column":1,"offset":3966},"end":{"line":59,"column":467,"offset":4432}}}],"position":{"start":{"line":59,"column":1,"offset":3966},"end":{"line":59,"column":467,"offset":4432}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">hierarchical_mutex <span class=\"token function\">high_level_mutex</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhierarchical_mutex <span class=\"token function\">low_level_mutex</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhierarchical_mutex <span class=\"token function\">other_mutex</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">do_low_level_stuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">low_level_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>hierarchical_mutex<span class=\"token operator\">></span> <span class=\"token function\">lk</span><span class=\"token punctuation\">(</span>low_level_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">do_low_level_stuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">high_level_stuff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> some_param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">high_level_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>hierarchical_mutex<span class=\"token operator\">></span> <span class=\"token function\">lk</span><span class=\"token punctuation\">(</span>high_level_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">high_level_stuff</span><span class=\"token punctuation\">(</span><span class=\"token function\">low_level_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">thread_a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">high_level_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">do_other_stuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">other_stuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">high_level_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">do_other_stuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">thread_b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>lock_guard<span class=\"token operator\">&lt;</span>hierarchical_mutex<span class=\"token operator\">></span> <span class=\"token function\">lk</span><span class=\"token punctuation\">(</span>other_mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">other_stuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":61,"column":1,"offset":4434},"end":{"line":97,"column":4,"offset":5089}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"کد بالا نمونه استفاده از یک میوتکس سلسله مراتبی یا hierarchical mutex هست. ترد a بدون مشکل می‌تونه به کارش ادامه بده چون میوتکس هاش رو با رعایت قوانین(که بالاتر ذکر کردم) قفل می‌کنه. اما ترد b به مشکل میخوره. چرا؟ چون اول اومده ","position":{"start":{"line":98,"column":1,"offset":5090},"end":{"line":98,"column":229,"offset":5318}}},{"type":"raw","value":"<code class=\"language-text\">other_mutex</code>","position":{"start":{"line":98,"column":229,"offset":5318},"end":{"line":98,"column":242,"offset":5331}}},{"type":"text","value":" که عددش برابر با 6000 هست رو قفل کرده. بعدش چی؟ بعدش در تابع ","position":{"start":{"line":98,"column":242,"offset":5331},"end":{"line":98,"column":304,"offset":5393}}},{"type":"raw","value":"<code class=\"language-text\">other_stuff()</code>","position":{"start":{"line":98,"column":304,"offset":5393},"end":{"line":98,"column":319,"offset":5408}}},{"type":"text","value":" اومده و یک میوتکس با عدد 10000 رو قفل کرده. و این مشخصا خلاف قوانینی که گفتیمه چرا که ترد ها فقط میتونن ترد هایی با عدد کمتر از عدد فعلی رو قفل کنن و برعکسش امکان پذیر نیست. به همین شکل، ترتیب قفل کردن ترد ها رعایت می‌شه (: ","position":{"start":{"line":98,"column":319,"offset":5408},"end":{"line":98,"column":544,"offset":5633}}}],"position":{"start":{"line":98,"column":1,"offset":5090},"end":{"line":98,"column":544,"offset":5633}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"البته این روش هم مشکلاتی داره... به عنوان مثال برای پیمایش یک لیست که نیازمند دست به دست کردن یا hand-over-hand کردن قفلِ میوتکس ها هست، جواب نمیده برای اینکه اونوقت به تعداد گره های لیست نیاز به سطح/لایه/... داریم! :/","position":{"start":{"line":100,"column":1,"offset":5635},"end":{"line":100,"column":219,"offset":5853}}}],"position":{"start":{"line":100,"column":1,"offset":5635},"end":{"line":100,"column":219,"offset":5853}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Storage class specifier: ","position":{"start":{"line":102,"column":4,"offset":5858},"end":{"line":102,"column":29,"offset":5883}}},{"type":"raw","value":"<code class=\"language-text\">thread_local</code>","position":{"start":{"line":102,"column":29,"offset":5883},"end":{"line":102,"column":43,"offset":5897}}}],"position":{"start":{"line":102,"column":1,"offset":5855},"end":{"line":102,"column":43,"offset":5897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"اگه بخوایم یه متغییری داشته باشیم که به ازای هر «ترد» ازش ساخته بشه، از این مشخصه استفاده می‌کنیم.","position":{"start":{"line":104,"column":1,"offset":5899},"end":{"line":104,"column":99,"offset":5997}}}],"position":{"start":{"line":104,"column":1,"offset":5899},"end":{"line":104,"column":99,"offset":5997}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">thread_local</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </code></pre></div>","position":{"start":{"line":106,"column":1,"offset":5999},"end":{"line":108,"column":4,"offset":6047}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"فرض کنیم دو ترد به اسم a و b داریم. اگر مقدار ","position":{"start":{"line":109,"column":1,"offset":6048},"end":{"line":109,"column":47,"offset":6094}}},{"type":"raw","value":"<code class=\"language-text\">value</code>","position":{"start":{"line":109,"column":47,"offset":6094},"end":{"line":109,"column":54,"offset":6101}}},{"type":"text","value":" در ترد a برابر با ۲ بشه، همه اونهایی که در ترد a هستن مقدار ۲ رو می‌بینن ولی مقدار ","position":{"start":{"line":109,"column":54,"offset":6101},"end":{"line":109,"column":138,"offset":6185}}},{"type":"raw","value":"<code class=\"language-text\">value</code>","position":{"start":{"line":109,"column":138,"offset":6185},"end":{"line":109,"column":145,"offset":6192}}},{"type":"text","value":" در ترد b همون ۱ هست و تغییری نمی‌کنه. بنابراین، این نوع متغییر ها فقط به ازای هر ترد براشون حافظه تخصیص داده می‌شه و در پایان کار هر ترد هم از بین می‌رن.","position":{"start":{"line":109,"column":145,"offset":6192},"end":{"line":109,"column":299,"offset":6346}}}],"position":{"start":{"line":109,"column":1,"offset":6048},"end":{"line":109,"column":299,"offset":6346}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"پایان","position":{"start":{"line":111,"column":4,"offset":6351},"end":{"line":111,"column":9,"offset":6356}}}],"position":{"start":{"line":111,"column":1,"offset":6348},"end":{"line":111,"column":9,"offset":6356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"بحث دِدلاک هم تقریبا فهمیدیم چیه و چطور میشه ازش جلوگیری کرد. متاسفانه دوباره دارم برمیگردم به اون حالت هیچکاری نکردن و عقب موندن از همه کارهام. از این وضعیت خوشم نمیاد. سعی می‌کنم تغییرش بدم.","position":{"start":{"line":113,"column":1,"offset":6358},"end":{"line":113,"column":193,"offset":6550}}}],"position":{"start":{"line":113,"column":1,"offset":6358},"end":{"line":113,"column":193,"offset":6550}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"در پست بعدی درباره اینکه چطور با میوتکس ها می‌تونیم ژانگولر بازی در بیاریم صحبت می‌کنیم.","position":{"start":{"line":115,"column":1,"offset":6552},"end":{"line":115,"column":89,"offset":6640}}}],"position":{"start":{"line":115,"column":1,"offset":6552},"end":{"line":115,"column":89,"offset":6640}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":132,"column":1,"offset":6657}}}}