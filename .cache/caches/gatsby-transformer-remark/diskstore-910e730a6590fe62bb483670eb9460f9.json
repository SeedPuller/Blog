{"expireTime":9007200880603433000,"key":"transformer-remark-markdown-html-ast-6cd7c486e234ff62ce707a1f7878df91-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"این فصل از دایتل درباره‌ی ویژگی ارث‌بری توی سی++ بود. نکاتی که برام جدیده رو توی این پست نوشتم.","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":96,"offset":97}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":96,"offset":97}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"تفاوت is-a relationship و has-a relationship","position":{"start":{"line":5,"column":4,"offset":102},"end":{"line":5,"column":48,"offset":146}}}],"position":{"start":{"line":5,"column":1,"offset":99},"end":{"line":5,"column":48,"offset":146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"وقتی یک کلاسی(A) از یک کلاس دیگه(B) ارث بری می‌کنه، میگیم که رابطه‌شون از نوع ","position":{"start":{"line":7,"column":1,"offset":148},"end":{"line":7,"column":79,"offset":226}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"is-a relationship","position":{"start":{"line":7,"column":80,"offset":227},"end":{"line":7,"column":97,"offset":244}}}],"position":{"start":{"line":7,"column":79,"offset":226},"end":{"line":7,"column":98,"offset":245}}},{"type":"text","value":"\nهست. یعنی کلاس A نوعی از کلاس B عه؛ مثالش؟ «خودرو» و «وسیله نقلیه».\nخودرو از وسیله‌ی نقلیه مشتق شده(نمیدونم این تعبیرِ مشتق شدن درسته یا نه)\nو تمام ویژگی های یک وسیله‌ی نقلیه رو داره. درواقع، «خودرو یک وسیله‌ی\nنقلیه‌ست».","position":{"start":{"line":7,"column":98,"offset":245},"end":{"line":11,"column":11,"offset":468}}}],"position":{"start":{"line":7,"column":1,"offset":148},"end":{"line":11,"column":11,"offset":468}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"اما وقتی یک کلاس در data-member های خود یک شئ از یک کلاس دیگه رو داره(composition) میگیم رابطه‌شون                ","position":{"start":{"line":13,"column":1,"offset":470},"end":{"line":13,"column":115,"offset":584}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"has-a relationship","position":{"start":{"line":13,"column":116,"offset":585},"end":{"line":13,"column":134,"offset":603}}}],"position":{"start":{"line":13,"column":115,"offset":584},"end":{"line":13,"column":135,"offset":604}}},{"type":"text","value":" هست. توی مثال خودرو، میشه فرمون خودرو رو مثال زد که خودش یک شئ هست و عضوی از خودرو محسوب میشه(نه نوعی از خودرو!).","position":{"start":{"line":13,"column":135,"offset":604},"end":{"line":13,"column":249,"offset":718}}}],"position":{"start":{"line":13,"column":1,"offset":470},"end":{"line":13,"column":249,"offset":718}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Constructor","position":{"start":{"line":15,"column":4,"offset":723},"end":{"line":15,"column":15,"offset":734}}}],"position":{"start":{"line":15,"column":1,"offset":720},"end":{"line":15,"column":15,"offset":734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"در حالت عادی، توابع سازنده(constructor)، نابودکننده(destructor) و اوپراتور تخصیص (","position":{"start":{"line":17,"column":1,"offset":736},"end":{"line":17,"column":83,"offset":818}}},{"type":"raw","value":"<code class=\"language-text\">operator=</code>","position":{"start":{"line":17,"column":83,"offset":818},"end":{"line":17,"column":94,"offset":829}}},{"type":"text","value":" ) از کلاس والد ارث برده نمیشن.","position":{"start":{"line":17,"column":94,"offset":829},"end":{"line":17,"column":125,"offset":860}}}],"position":{"start":{"line":17,"column":1,"offset":736},"end":{"line":17,"column":125,"offset":860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"وقتی یک شئ از کلاس فرزند(B) ساخته میشه اگه کلاس والد(A) دارای default\nconstructor باشه، بدون اینکه کانستراکتور والد رو صراحتا صدا بزنیم، خودش\nبه صورت ضمنی اجرا میشه. اما اگه کلاس A دارای default constructor نباشه\nباید حتما خودمون کانستراکتور کلاس A رو توی کانستراکتور کلاس B صدا بزنیم.","position":{"start":{"line":19,"column":1,"offset":862},"end":{"line":22,"column":73,"offset":1148}}}],"position":{"start":{"line":19,"column":1,"offset":862},"end":{"line":22,"column":73,"offset":1148}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"دسترسی به عناصر ","position":{"start":{"line":24,"column":4,"offset":1153},"end":{"line":24,"column":20,"offset":1169}}},{"type":"raw","value":"<code class=\"language-text\">private</code>","position":{"start":{"line":24,"column":20,"offset":1169},"end":{"line":24,"column":29,"offset":1178}}},{"type":"text","value":" والد","position":{"start":{"line":24,"column":29,"offset":1178},"end":{"line":24,"column":34,"offset":1183}}}],"position":{"start":{"line":24,"column":1,"offset":1150},"end":{"line":24,"column":34,"offset":1183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"کلاس فرزند نمیتونه به طور مستقیم به عناصر ","position":{"start":{"line":26,"column":1,"offset":1185},"end":{"line":26,"column":43,"offset":1227}}},{"type":"raw","value":"<code class=\"language-text\">private</code>","position":{"start":{"line":26,"column":43,"offset":1227},"end":{"line":26,"column":52,"offset":1236}}},{"type":"text","value":" کلاس والد دسترسی داشته باشه. برای اینکه بشه اینکار رو انجام داد، اون عناصر مورد نظر توی کلاس والد باید به عنوان ","position":{"start":{"line":26,"column":52,"offset":1236},"end":{"line":26,"column":165,"offset":1349}}},{"type":"raw","value":"<code class=\"language-text\">protected</code>","position":{"start":{"line":26,"column":165,"offset":1349},"end":{"line":26,"column":176,"offset":1360}}},{"type":"text","value":" تعریف شده باشن یا اینکه کلاس فرزند از طریق توابع public کلاس والد اقدام به دسترسی گرفتن به عناصر پرایوت بکنه. ","position":{"start":{"line":26,"column":176,"offset":1360},"end":{"line":26,"column":287,"offset":1471}}}],"position":{"start":{"line":26,"column":1,"offset":1185},"end":{"line":26,"column":287,"offset":1471}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"با استفاده از ","position":{"start":{"line":28,"column":1,"offset":1473},"end":{"line":28,"column":15,"offset":1487}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"protected access specifier","position":{"start":{"line":28,"column":16,"offset":1488},"end":{"line":28,"column":42,"offset":1514}}}],"position":{"start":{"line":28,"column":15,"offset":1487},"end":{"line":28,"column":43,"offset":1515}}},{"type":"text","value":" به دلیل اینکه میتونید به صورت مستقیم به عناصر مورد دسترسی داشته باشید، برنامه‌تون کمی سریعتر میشه. در مقابل استفاده از توابع ","position":{"start":{"line":28,"column":43,"offset":1515},"end":{"line":28,"column":169,"offset":1641}}},{"type":"raw","value":"<code class=\"language-text\">public</code>","position":{"start":{"line":28,"column":169,"offset":1641},"end":{"line":28,"column":177,"offset":1649}}},{"type":"text","value":" باعث میشه برنامه‌تون کمی کند تر باشه.","position":{"start":{"line":28,"column":177,"offset":1649},"end":{"line":28,"column":215,"offset":1687}}}],"position":{"start":{"line":28,"column":1,"offset":1473},"end":{"line":28,"column":215,"offset":1687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"اما این روش(","position":{"start":{"line":30,"column":1,"offset":1689},"end":{"line":30,"column":13,"offset":1701}}},{"type":"raw","value":"<code class=\"language-text\">protected</code>","position":{"start":{"line":30,"column":13,"offset":1701},"end":{"line":30,"column":24,"offset":1712}}},{"type":"text","value":") مشکلاتی هم داره:","position":{"start":{"line":30,"column":24,"offset":1712},"end":{"line":30,"column":42,"offset":1730}}}],"position":{"start":{"line":30,"column":1,"offset":1689},"end":{"line":30,"column":42,"offset":1730}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"اول اینکه ممکنه داده های invalid بهشون تخصیص داده بشه. یعنی از\nاونجایی که دسترسی به صورت مستقیم و بدون اعتبارسنجی به اون‌ها وجود داره،\nممکنه یک داده‌ی اشتباهی بهشون تخصیص داده بشه.","position":{"start":{"line":32,"column":1,"offset":1732},"end":{"line":34,"column":46,"offset":1914}}}],"position":{"start":{"line":32,"column":1,"offset":1732},"end":{"line":34,"column":46,"offset":1914}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"دوم اینکه برنامه رو شکننده (اصطلاحا ","position":{"start":{"line":36,"column":1,"offset":1916},"end":{"line":36,"column":37,"offset":1952}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"fragile","position":{"start":{"line":36,"column":38,"offset":1953},"end":{"line":36,"column":45,"offset":1960}}}],"position":{"start":{"line":36,"column":37,"offset":1952},"end":{"line":36,"column":46,"offset":1961}}},{"type":"text","value":") میکنه. یعنی کلاس فرزند جای اینکه بر پایه خدماتی(","position":{"start":{"line":36,"column":46,"offset":1961},"end":{"line":36,"column":96,"offset":2011}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"service","position":{"start":{"line":36,"column":97,"offset":2012},"end":{"line":36,"column":104,"offset":2019}}}],"position":{"start":{"line":36,"column":96,"offset":2011},"end":{"line":36,"column":105,"offset":2020}}},{"type":"text","value":") باشه که کلاس والد ارائه میده، بر پایه‌ی پیاده سازی (","position":{"start":{"line":36,"column":105,"offset":2020},"end":{"line":36,"column":159,"offset":2074}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"implementation","position":{"start":{"line":36,"column":160,"offset":2075},"end":{"line":36,"column":174,"offset":2089}}}],"position":{"start":{"line":36,"column":159,"offset":2074},"end":{"line":36,"column":175,"offset":2090}}},{"type":"text","value":")\nکلاس والد توسعه پیدا میکنه. مشکلش چیه؟ از نظر مهندسی نرم افزار بهتره که\nتغییرات رو localize بکنیم. یعنی برنامه طوری نباشه که اگر اسم یکی از\nعناصر رو توی کلاس والد تغییر دادیم، مجبور بشیم تمام جاهایی از کلاس\nفرزندمون که به اون عضو رفرنس دادیم رو تغییر بدیم و استفاده از protected\nپتانسیل بوجود اومدن چنین مشکلی رو ایجاد می‌کنه.","position":{"start":{"line":36,"column":175,"offset":2090},"end":{"line":41,"column":48,"offset":2421}}}],"position":{"start":{"line":36,"column":1,"offset":1916},"end":{"line":41,"column":48,"offset":2421}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"مگه نگفتی استفاده از توابع public برنامه رو کندتر می‌کنه؟","position":{"start":{"line":43,"column":5,"offset":2427},"end":{"line":43,"column":62,"offset":2484}}}],"position":{"start":{"line":43,"column":1,"offset":2423},"end":{"line":43,"column":62,"offset":2484}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"چرا. اما بهتره که ما اصول مهندسی نرم افزار رو رعایت کنیم و بهینه کردن\nکد(optimization) توی این مورد رو به دست کامپایلر بسپاریم. چون خیلی وقتا\nکامپایلر خودش بهینه سازی های خوبی انجام میده(مثلا ممکنه توابع set و get\nرو به حالت inline دربیاره). به قول معروف، ","position":{"start":{"line":45,"column":1,"offset":2486},"end":{"line":48,"column":43,"offset":2742}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Do not second-guess the compiler","position":{"start":{"line":48,"column":44,"offset":2743},"end":{"line":48,"column":76,"offset":2775}}}],"position":{"start":{"line":48,"column":43,"offset":2742},"end":{"line":48,"column":77,"offset":2776}}},{"type":"text","value":" .","position":{"start":{"line":48,"column":77,"offset":2776},"end":{"line":48,"column":79,"offset":2778}}}],"position":{"start":{"line":45,"column":1,"offset":2486},"end":{"line":48,"column":79,"offset":2778}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"فرق بین ارث بری public و بقیه","position":{"start":{"line":50,"column":4,"offset":2783},"end":{"line":50,"column":33,"offset":2812}}}],"position":{"start":{"line":50,"column":1,"offset":2780},"end":{"line":50,"column":33,"offset":2812}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"خود کتاب یه جدول خیلی خوب رسم کرده که من عکسش رو میذارم. به نظرم خوندن همون کافیه ","position":{"start":{"line":52,"column":1,"offset":2814},"end":{"line":52,"column":83,"offset":2896}}},{"type":"element","tagName":"img","properties":{"src":"https://seedpuller.space/wp-content/uploads/2020/04/image-1.png","alt":null},"children":[],"position":{"start":{"line":52,"column":83,"offset":2896},"end":{"line":52,"column":151,"offset":2964}}}],"position":{"start":{"line":52,"column":1,"offset":2814},"end":{"line":52,"column":151,"offset":2964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://seedpuller.space/wp-content/uploads/2020/04/image-2.png","alt":null},"children":[],"position":{"start":{"line":54,"column":1,"offset":2966},"end":{"line":54,"column":69,"offset":3034}}}],"position":{"start":{"line":54,"column":1,"offset":2966},"end":{"line":54,"column":69,"offset":3034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"ارث بردن constructor","position":{"start":{"line":56,"column":4,"offset":3039},"end":{"line":56,"column":24,"offset":3059}}}],"position":{"start":{"line":56,"column":1,"offset":3036},"end":{"line":56,"column":24,"offset":3059}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"بالاتر گفتم که در حالت عادی کانستراکتور از کلاس والد به ارث برده\nنمیشه. اما توی C++ 11 ویژگی ای اضافه شده که اجازه میده کانستراکتور والد\nتوسط کلاس فرزند به ارث برده بشه.","position":{"start":{"line":58,"column":1,"offset":3061},"end":{"line":60,"column":33,"offset":3232}}}],"position":{"start":{"line":58,"column":1,"offset":3061},"end":{"line":60,"column":33,"offset":3232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"برای اینکار باید یه همچین چیزی توی تعریف کلاستون بنویسید:","position":{"start":{"line":62,"column":1,"offset":3234},"end":{"line":62,"column":58,"offset":3291}}}],"position":{"start":{"line":62,"column":1,"offset":3234},"end":{"line":62,"column":58,"offset":3291}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">using</span> BaseClass<span class=\"token double-colon punctuation\">::</span>BaseClass<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":64,"column":1,"offset":3293},"end":{"line":66,"column":4,"offset":3331}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"که ","position":{"start":{"line":68,"column":1,"offset":3333},"end":{"line":68,"column":4,"offset":3336}}},{"type":"raw","value":"<code class=\"language-text\">BaseClass</code>","position":{"start":{"line":68,"column":4,"offset":3336},"end":{"line":68,"column":15,"offset":3347}}},{"type":"text","value":" اسم کلاس والد هست. با اینکار، کامپایلر به\nازای کانستراکتور های موجود توی کلاس والد، یه کانستراکتور توی کلاس فرزند\nمیسازه که به طور خودکار تابع متناظرش توی کلاس والد رو صدا بزنه و\ndata-member های کلاس فرزند رو default initialize بکنه.","position":{"start":{"line":68,"column":15,"offset":3347},"end":{"line":71,"column":55,"offset":3584}}}],"position":{"start":{"line":68,"column":1,"offset":3333},"end":{"line":71,"column":55,"offset":3584}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"چندتا نکته برای این کار وجود داره:","position":{"start":{"line":73,"column":1,"offset":3586},"end":{"line":73,"column":35,"offset":3620}}}],"position":{"start":{"line":73,"column":1,"offset":3586},"end":{"line":73,"column":35,"offset":3620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"کانستراکتور های default, copy, move ارث بری نمیشن.","position":{"start":{"line":75,"column":3,"offset":3624},"end":{"line":75,"column":53,"offset":3674}}}],"position":{"start":{"line":75,"column":1,"offset":3622},"end":{"line":75,"column":53,"offset":3674}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"اگر\nتوی کلاس فرزند کانستراکتوری باشه که ورودی هاش با ورودی های یک\nکانستراکتور توی کلاس والد یکسان باشه، اون کانستراکتور به ارث برده نمیشه.","position":{"start":{"line":76,"column":3,"offset":3677},"end":{"line":78,"column":74,"offset":3819}}}],"position":{"start":{"line":76,"column":1,"offset":3675},"end":{"line":78,"column":74,"offset":3819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"اگه کانستراکتور دارای default argument باشه، به همون صورت به ارث نمیرسه بلکه به صورت چند کانستراکتور overload شده به ارث میرسه.","position":{"start":{"line":79,"column":3,"offset":3822},"end":{"line":79,"column":130,"offset":3949}}}],"position":{"start":{"line":79,"column":1,"offset":3820},"end":{"line":79,"column":130,"offset":3949}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"اگه یه کانستراکتور توی کلاس والد حذف بشه، توی کلاس فرزند هم حذف میشه.","position":{"start":{"line":80,"column":3,"offset":3952},"end":{"line":80,"column":72,"offset":4021}}}],"position":{"start":{"line":80,"column":1,"offset":3950},"end":{"line":80,"column":72,"offset":4021}}},{"type":"text","value":"\n"}],"position":{"start":{"line":75,"column":1,"offset":3622},"end":{"line":80,"column":72,"offset":4021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"در آخر","position":{"start":{"line":82,"column":4,"offset":4026},"end":{"line":82,"column":10,"offset":4032}}}],"position":{"start":{"line":82,"column":1,"offset":4023},"end":{"line":82,"column":10,"offset":4032}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"فصل بعدی درباره‌ی چند ریختی یا همون polymorphism عه که دانش ابتدایی ما برای برنامه نویسی شئ‌گرا رو کامل میکنه.","position":{"start":{"line":84,"column":1,"offset":4034},"end":{"line":84,"column":111,"offset":4144}}}],"position":{"start":{"line":84,"column":1,"offset":4034},"end":{"line":84,"column":111,"offset":4144}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":85,"column":1,"offset":4145}}}}