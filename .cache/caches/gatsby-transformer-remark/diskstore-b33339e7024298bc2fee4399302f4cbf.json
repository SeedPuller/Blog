{"expireTime":9007200880603434000,"key":"transformer-remark-markdown-html-897aba43ddadfd077a36cc49327225ab-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":"<p>فصل نهم از کتاب <em>C++ How To Program</em> (نگارش ۲۰۱۷) رو تموم کردم و توی این پست نکاتی که از این فصل یادگرفتم(و یادم مونده=) ) رو می‌نویسم.</p>\n<h2>تابع نابودگر (Destructor)</h2>\n<p>علاوه بر ترتیب اجرا شدنش برای اشیاء مختلف که به صورت «از بیرون به داخل» عه، وظیفه‌ی دیستراکتور درواقع Termination housekeeping عه. مثالش میشه کلاس file از <em>STL</em> که قبل از نابود شدن، فایل هایی که باز موندن توسط این تابع بسته میشن.</p>\n<h2>ممبر فانکشن های <code class=\"language-text\">const</code></h2>\n<p>علاوه بر رعایت Least privilege principle در هنگام نوشتن توابع که موجب میشه تابع هایی که دیتا ممبر های کلاس رو تغییر نمیدن رو به صورت <code class=\"language-text\">const</code> تعریف کنیم، اگر شئ ای رو به صورت <code class=\"language-text\">const</code> توی کدِ کلاینت‌مون تعریف کنیم اونوقت تنها از متود هایی میتونیم استفاده کنیم که قبلا <code class=\"language-text\">const</code> تعریف شدن.</p>\n<h2>یک شئ به عنوان عضوی از کلاس (Composition)</h2>\n<p>نکته‌ی اول اینکه دیتا ممبر های یک کلاس به ترتیب تعریف شدنشون ساخته(کانستراکت) میشن نه به ترتیب نوشتنشون توی member-initializer list (ولی بهتره برای خوانایی کد به همون ترتیبی که تعریف شدن توی لیست شروع کننده هم نوشته بشن). همچنین، دیتا ممبر ها قبل از کانستراکت شدنِ شئ ای که داخلش قرار دارن ساخته میشن. </p>\n<blockquote>\n<p>دیتا ممبر ها قبل از کانستراکت شدنِ شئ ای که داخلش قرار دارن ساخته میشن.</p>\n</blockquote>\n<p>برای همینه که مهمه وقتی از Composition استفاده می‌کنیم حتما از member-initializer list استفاده کنیم. اگر اینکار رو انجام ندیم و داخل بدنه‌ی کانستراکتور اشیاء رو بسازیم، درواقع داریم اون ها رو دوباره مقدار دهی میکنیم.</p>\n<p>چون یکبار دیفالت کانستراکتور خودشون موقع ساخته شدن شئ اصلی(= Enclosing Object) صدا زده میشه و بعد یکبار هم ما مقدار دهیشون میکنیم.</p>\n<p>با استفاده از member-initializer list میتونیم از این دوباره کاری جلوگیری کنیم.</p>\n<h2>اشاره گر <code class=\"language-text\">this</code></h2>\n<p>یه نکته ای که راجع به این اشاره گر فهمیدم این بود که اگر بر فرض اسم کلاس ما <em>Test</em> باشه، اشاره گر <code class=\"language-text\">this</code> از نوع <code class=\"language-text\">const Test*</code> عه</p>\n<h2>فصل بعدیِ کتاب</h2>\n<p>فصل بعدی درباره‌ی Operator Overloading عه.</p>"}