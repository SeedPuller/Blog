{"expireTime":9007200880603433000,"key":"transformer-remark-markdown-ast-1751b791424d8f40731d7e0e81370c30-gatsby-remark-imagesgatsby-remark-audiogatsby-remark-external-linksgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"خب فصل ۱۰ ام از کتاب برنامه نویسی سی++ دایتل رو تموم کردم. اینجا خلاصه ای از چیزای جدیدی که یادگرفتم رو می‌نویسم.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":114,"offset":114},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":114,"offset":114},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"string-object literal","position":{"start":{"line":4,"column":4,"offset":119},"end":{"line":4,"column":25,"offset":140},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":116},"end":{"line":4,"column":25,"offset":140},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"توی سی++ ۱۴ میشه با اضافه کردن یک s به انتهای لیترال رشته‌ای‌مون(بعد \nاز دابل کوتیشن، نه قبلش) اون رشته رو تبدیل به یه شئ از کلاس ","position":{"start":{"line":6,"column":1,"offset":142},"end":{"line":7,"column":61,"offset":272},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">string</code>","position":{"start":{"line":7,"column":61,"offset":272},"end":{"line":7,"column":69,"offset":280},"indent":[]}},{"type":"text","value":" کرد. مثال:","position":{"start":{"line":7,"column":69,"offset":280},"end":{"line":7,"column":80,"offset":291},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":142},"end":{"line":7,"column":80,"offset":291},"indent":[1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">\"Hello, World\"s</code>","position":{"start":{"line":9,"column":1,"offset":293},"end":{"line":9,"column":18,"offset":310},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":293},"end":{"line":9,"column":18,"offset":310},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Operator Overloading؛ به عنوان عضو کلاس یا نه؟","position":{"start":{"line":11,"column":4,"offset":315},"end":{"line":11,"column":50,"offset":361},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":312},"end":{"line":11,"column":50,"offset":361},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"با اینکه من قبلا این بخش هارو توی کتاب C How To Program خونده بودم \nاما چون یادداشت نکرده بودم و خیلی وقت هم شده بود که حوصله‌ی برنامه نویسی\nرو نداشتم، یادم رفته بود.","position":{"start":{"line":13,"column":1,"offset":363},"end":{"line":15,"column":26,"offset":529},"indent":[1,1]}}],"position":{"start":{"line":13,"column":1,"offset":363},"end":{"line":15,"column":26,"offset":529},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"مسئله اینه که چه وقتی باید تابع اوپراتوری که overload میشه رو جزئی از\nmember function ها بذاریم و چه وقتی جزئی از non-member function. \nساده‌ست، تنها زمانی میتونیم تابع اوپراتور رو به عنوان عضوی از کلاس قرار \nبدیم که شئِ کلاس ما به عنوان پارامتر در سمت چپ قرار بگیره. این کد رو \nببینید:","position":{"start":{"line":17,"column":1,"offset":531},"end":{"line":21,"column":8,"offset":817},"indent":[1,1,1,1]}}],"position":{"start":{"line":17,"column":1,"offset":531},"end":{"line":21,"column":8,"offset":817},"indent":[1,1,1,1]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> input<span class=\"token punctuation\">,</span> MyClass<span class=\"token operator\">&amp;</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":23,"column":1,"offset":819},"end":{"line":25,"column":4,"offset":883},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"وقتی مینویسیم ","position":{"start":{"line":27,"column":1,"offset":885},"end":{"line":27,"column":15,"offset":899},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cin >> myobject</code>","position":{"start":{"line":27,"column":15,"offset":899},"end":{"line":27,"column":32,"offset":916},"indent":[]}},{"type":"text","value":" درواقع انگار تابع رو به شکل ","position":{"start":{"line":27,"column":32,"offset":916},"end":{"line":27,"column":61,"offset":945},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">operator>>(input, myobject)</code>","position":{"start":{"line":27,"column":61,"offset":945},"end":{"line":27,"column":90,"offset":974},"indent":[]}},{"type":"text","value":" فراخوانی کردیم. ","position":{"start":{"line":27,"column":90,"offset":974},"end":{"line":27,"column":107,"offset":991},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":885},"end":{"line":27,"column":107,"offset":991},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"حالا از اونجایی که شئ ما توی پارامتر سمت چپ قرار نمیگیره، نمیتونیم \nاین اوپراتور رو داخل کلاس overload کنیم و اگر اینکارو انجام دادیم، باید \nاینطوری بنویسیمش: ","position":{"start":{"line":29,"column":1,"offset":993},"end":{"line":31,"column":19,"offset":1152},"indent":[1,1]}},{"type":"html","value":"<code class=\"language-text\">myobject &lt;&lt; cin</code>","position":{"start":{"line":31,"column":19,"offset":1152},"end":{"line":31,"column":36,"offset":1169},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":993},"end":{"line":31,"column":36,"offset":1169},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"از طرف دیگه، برای اینکه بتونیم اوپراتور هامون رو به صورت \ncommutative(جابجایی پذیر) تعریف کنیم، به دلایلی که بالاتر توضیح داده شد \nباید حداقل یکبار اوپراتورمون رو به عنوان non-member function تعریف کنیم.","position":{"start":{"line":33,"column":1,"offset":1171},"end":{"line":35,"column":73,"offset":1374},"indent":[1,1]}}],"position":{"start":{"line":33,"column":1,"offset":1171},"end":{"line":35,"column":73,"offset":1374},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"نکته درباره‌ی Dynamic Allocation در عضو های کلاس","position":{"start":{"line":37,"column":4,"offset":1379},"end":{"line":37,"column":52,"offset":1427},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1376},"end":{"line":37,"column":52,"offset":1427},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"وقتی یک حافظه ای رو به صورت پویا برای یکی از اعضای کلاس‌مون (data-member) در نظر می‌گیریم باید حواسمون باشه که Default\nmemberwise assignment و Default copy constructor رو به حال خودشون رها \nنکنیم چون مشکلاتی مثل double free رو بوجود میارن. پس یادمون باشه که کپی \nکانستراکتور خودمون + علامت مساوی(=) خودمون رو تعریف کنیم.","position":{"start":{"line":39,"column":1,"offset":1429},"end":{"line":42,"column":58,"offset":1749},"indent":[1,1,1]}}],"position":{"start":{"line":39,"column":1,"offset":1429},"end":{"line":42,"column":58,"offset":1749},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"حذف یه تابع از کلاس","position":{"start":{"line":44,"column":4,"offset":1754},"end":{"line":44,"column":23,"offset":1773},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1751},"end":{"line":44,"column":23,"offset":1773},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"یه تابع از کلاس (function member) رو میشه حذف کرد. قبلا برای اینکار، \nاون تابع رو جزء بخش private کلاس قرار می‌دادند اما الان به عنوان مثال \nمیشه اینطوری نوشت: ","position":{"start":{"line":46,"column":1,"offset":1775},"end":{"line":48,"column":20,"offset":1935},"indent":[1,1]}}],"position":{"start":{"line":46,"column":1,"offset":1775},"end":{"line":48,"column":20,"offset":1935},"indent":[1,1]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> Array<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Array<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":50,"column":1,"offset":1937},"end":{"line":52,"column":4,"offset":1994},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"کاربردش چیه؟ معمولا برای غیرفعال کردن توابعی که توسط کامپایلر به صورت\nخودکار ساخته میشن (auto generate)، مثل سازنده‌ی پیشفرض(Default \nconstructor)، کپی کانستراکتور، اوپراتور تخصیص (=) و … استفاده می‌شن.","position":{"start":{"line":54,"column":1,"offset":1996},"end":{"line":56,"column":69,"offset":2198},"indent":[1,1]}}],"position":{"start":{"line":54,"column":1,"offset":1996},"end":{"line":56,"column":69,"offset":2198},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"تعریف شئ از کلاس با initializer list","position":{"start":{"line":58,"column":4,"offset":2203},"end":{"line":58,"column":40,"offset":2239},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2200},"end":{"line":58,"column":41,"offset":2240},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"برای اینکه بتونیم یه شئ از کلاسمون رو با initializer list بسازیم، باید یه کانستراکتور داشته باشیم که ورودی‌ش از نوع ","position":{"start":{"line":60,"column":1,"offset":2242},"end":{"line":60,"column":117,"offset":2358},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">initializer_list</code>","position":{"start":{"line":60,"column":117,"offset":2358},"end":{"line":60,"column":135,"offset":2376},"indent":[]}},{"type":"text","value":"باشه. مثال: ","position":{"start":{"line":60,"column":135,"offset":2376},"end":{"line":60,"column":147,"offset":2388},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2242},"end":{"line":60,"column":147,"offset":2388},"indent":[]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token class-name\">MyClass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span>initializer_list list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":62,"column":1,"offset":2390},"end":{"line":64,"column":4,"offset":2441},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"تبدیل انواع مختلف به کلاس و بالعکس","position":{"start":{"line":66,"column":4,"offset":2446},"end":{"line":66,"column":38,"offset":2480},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2443},"end":{"line":66,"column":38,"offset":2480},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"ما میتونیم اشیاء ای که از کلاسمون میسازیم رو با استفاده از Conversion\nConstructor ها و Conversion Operator ها به انواع دیگه ای تبدیل کنیم. ","position":{"start":{"line":68,"column":1,"offset":2482},"end":{"line":69,"column":70,"offset":2621},"indent":[1]}}],"position":{"start":{"line":68,"column":1,"offset":2482},"end":{"line":69,"column":70,"offset":2621},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"برای اینکه یه کانستراکتور تبدیل کننده داشته باشیم نیاز داریم که \nکانستراکتور ما بتونه با یک آرگومان صدا زده بشه.(این مسئله برای کپی \nکانستراکتور ها صادق نیست) مثال : ","position":{"start":{"line":71,"column":1,"offset":2623},"end":{"line":73,"column":34,"offset":2789},"indent":[1,1]}}],"position":{"start":{"line":71,"column":1,"offset":2623},"end":{"line":73,"column":34,"offset":2789},"indent":[1,1]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token class-name\">MyClass</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":75,"column":1,"offset":2791},"end":{"line":77,"column":4,"offset":2826},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"حالا با استفاده از این تابع میشه هم به صورت ضمنی و هم به صورت مستقیم یک int رو به شئ ای از کلاس خودمون تبدیل کنیم.","position":{"start":{"line":79,"column":1,"offset":2828},"end":{"line":79,"column":115,"offset":2942},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2828},"end":{"line":79,"column":115,"offset":2942},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"برای تعریف یک Conversion Operator میتونیم اینطوری عمل کنیم:","position":{"start":{"line":81,"column":1,"offset":2944},"end":{"line":81,"column":60,"offset":3003},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2944},"end":{"line":81,"column":60,"offset":3003},"indent":[]}},{"type":"html","lang":"cpp","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">MyClass<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":83,"column":1,"offset":3005},"end":{"line":85,"column":4,"offset":3049},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"حالا اگر فرض کنیم ","position":{"start":{"line":87,"column":1,"offset":3051},"end":{"line":87,"column":19,"offset":3069},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">a</code>","position":{"start":{"line":87,"column":19,"offset":3069},"end":{"line":87,"column":22,"offset":3072},"indent":[]}},{"type":"text","value":" اسم شئ ما باشه، وقتی بنویسیم ","position":{"start":{"line":87,"column":22,"offset":3072},"end":{"line":87,"column":52,"offset":3102},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">static_cast&lt;string> (a)</code>","position":{"start":{"line":87,"column":52,"offset":3102},"end":{"line":87,"column":78,"offset":3128},"indent":[]}},{"type":"text","value":" درواقع کامپایلر تابع ","position":{"start":{"line":87,"column":78,"offset":3128},"end":{"line":87,"column":100,"offset":3150},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">a.operator string()</code>","position":{"start":{"line":87,"column":100,"offset":3150},"end":{"line":87,"column":121,"offset":3171},"indent":[]}},{"type":"text","value":" رو صدا میزنه.","position":{"start":{"line":87,"column":121,"offset":3171},"end":{"line":87,"column":135,"offset":3185},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":3051},"end":{"line":87,"column":135,"offset":3185},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"چرا توابع سازنده‌مون رو به شکل ","position":{"start":{"line":89,"column":4,"offset":3190},"end":{"line":89,"column":35,"offset":3221},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">explicit</code>","position":{"start":{"line":89,"column":35,"offset":3221},"end":{"line":89,"column":45,"offset":3231},"indent":[]}},{"type":"text","value":" تعریف کنیم؟","position":{"start":{"line":89,"column":45,"offset":3231},"end":{"line":89,"column":57,"offset":3243},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":3187},"end":{"line":89,"column":57,"offset":3243},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"توابع سازنده ای که میتونن فقط با یک آرگومان صدا زده بشن ممکنه توسط \nکامپایلر اشتباها به عنوان Conversion Constructor تلقی بشن(چون این تابع \nها هم با یک ورودی صدا زده میشن) و به صورت ضمنی عمل cast رو انجام بدن. \nدرکل ما برای اینکه از تبدیل ضمنی چه توی کانستراکتور(اونایی که میتونن با \nیه آرگومان صدا زده بشن) و چه توی اوپراتور های تبدیلی( conversion \noperator) جلوگیری کنیم، اون توابع رو به صورت explicit تعریف می‌کنیم.","position":{"start":{"line":91,"column":1,"offset":3245},"end":{"line":96,"column":69,"offset":3663},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":91,"column":1,"offset":3245},"end":{"line":96,"column":69,"offset":3663},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"فصل بعدی درباره‌ی ارث‌بری هست ","position":{"start":{"line":98,"column":1,"offset":3665},"end":{"line":98,"column":31,"offset":3695},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":3665},"end":{"line":98,"column":31,"offset":3695},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":99,"column":1,"offset":3696}}}}